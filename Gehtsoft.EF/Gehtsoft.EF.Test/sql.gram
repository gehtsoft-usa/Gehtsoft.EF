grammar SqlTest
{
    options
    {
        Axiom = "ROOT";
        Separator = "SEPARATOR";
        ParserType = "RNGLR";
    }

    terminals
    {
        NEW_LINE        -> U+000D /* CR */
                        |  U+000A /* LF */
                        |  U+000D U+000A /* CR LF */
                        |  U+0085 // Next line character
                        |  U+2028 // Line separator character
                        |  U+2029 ; //Paragraph separator character (U+2029)

        WHITE_SPACE -> U+0020 | U+0009 | U+000B | U+000C | U+000d | U+000a;

        INT -> [0-9]+;

        REAL -> [0-9]+ '.' [0-9]* | '.' [0-9]+;

        STRINGDQ -> '"' ( (. - ('"' | '\\')) |
                               ('\\' ('"' | '\\' | 'r' | 'n' | 'b' | 't')) |
                               ('\\' [0-9] [0-9] [0-9]) |
                               ('\\' 'x' [0-9a-fA-F] [0-9a-fA-F])
                        )*  '"';

        STRINGSQ -> '\'' ( (. - ('\'' | '\\')) |
                               ('\\' ('"' | '\\' | 'r' | 'n' | 'b' | 't')) |
                               ('\\' [0-9] [0-9] [0-9]) |
                               ('\\' 'x' [0-9a-fA-F] [0-9a-fA-F])
                        )*  '\'';

        COMMENT_LINE    -> '--' (.* - (.* NEW_LINE .*)) ;
        IDENTIFIER  -> [a-zA-Z_] [a-zA-Z0-9_]* ;
        SEPARATOR   -> WHITE_SPACE | COMMENT_LINE | NEW_LINE;
    }

    rules {

        NULL -> 'NULL'!;

        BOOLEAN_TRUE -> 'TRUE'!;

        BOOLEAN_FALSE -> 'FALSE'!;

        BOOLEAN_CONST -> BOOLEAN_TRUE^ | BOOLEAN_FALSE^;

        STRING_CONST -> STRINGDQ^ | STRINGSQ^;

        NUMBER_CONST -> INT^ | REAL^;

        DATE_CONST -> 'D'! STRING_CONST;

        CONSTANT -> NULL^ |
                    BOOLEAN_CONST^ |
                    STRING_CONST^ |
                    NUMBER_CONST^ |
                    DATE_CONST^;

        EOS -> ';'! *;
        NOP -> ';'!;

        MINUS_OP -> '-'!;
        PLUS_OP -> '+'!;
        MUL_OP -> '*'!;
        DIV_OP -> '/'!;
        CONCAT_OP -> '||'!;

        EQ_OP -> '='!;
        NEQ_OP -> '<>'!;
        GT_OP -> '>'!;
        GE_OP -> '>='!;
        LT_OP -> '<'!;
        LE_OP -> '<='!;

        LIKE_OP -> 'LIKE'!;
        NOT_LIKE_OP -> 'NOT'! 'LIKE'!;

        IN_OP -> 'IN'!;
        NOT_IN_OP -> 'NOT'! 'IN'!;

        EXISTS_OP -> 'EXISTS'!;
        NOT_EXISTS_OP -> 'NOT'! 'EXISTS'!;

        NULL_OP -> 'IS'! 'NULL'!;
        NOT_NULL_OP -> 'IS'! 'NOT'! 'NULL'!;

        CALL_ARGS -> EXPR (','! EXPR)*;
        CALL_BRACKET -> '('! CALL_ARGS^ ')'!;

        MATH_FUNC_NAME -> 'ABS'^ | 'ROUND'^;
        MATH_FUNC_CALL -> MATH_FUNC_NAME  '('! EXPR ')'!;

        TWO_ARG_FUNC_NAME -> 'ROUND'^ | 'LEFT'^;
        TWO_ARG_FUNC_CALL -> TWO_ARG_FUNC_NAME  '('! EXPR ','! EXPR ')'!;

        DATE_FUNC_NAME -> 'YEAR'^ | 'MONTH'^ | 'DAY'^  | 'HOUR'^ | 'MINUTE'^ | 'SECOND'^;
        DATE_FUNC_CALL -> DATE_FUNC_NAME '('! EXPR ')'!;

        CAST_FUNC_NAME -> 'TOSTRING'^ | 'TOINT'^ | 'TODOUBLE'^ | 'TODATE'^ | 'TOTIMESTAMP'^;
        CAST_FUNC_CALL -> CAST_FUNC_NAME  '('! CALL_ARGS ')'!;

        STR_FUNC_NAME -> 'TRIM'^ | 'LTRIM'^ | 'RTRIM'^ | 'UPPER'^ | 'LOWER'^ | 'LENGTH'^;
        STR_FUNC_CALL -> STR_FUNC_NAME  '('! CONCAT_EXPR ')'!;

        BOOL_STR_FUNC_NAME -> 'CONTAINS'^ | 'ENDSWITH'^ | 'STARTSWITH'^ ;
        BOOL_STR_FUNC_CALL -> BOOL_STR_FUNC_NAME  '('! CONCAT_EXPR ','! CONCAT_EXPR ')'!;

        TRIM_LEADING -> 'LEADING'! ;
        TRIM_TRAILING -> 'TRAILING'! ;
        TRIM_BOTH -> 'BOTH'! ;
        TRIM_SPECIFICATION -> TRIM_LEADING^ | TRIM_TRAILING^ | TRIM_BOTH^ ;
        TRIM_CALL -> 'TRIM'! '('! TRIM_SPECIFICATION? CONCAT_EXPR ')'!;

        FUNC_CALL -> MATH_FUNC_CALL^ | BOOL_STR_FUNC_CALL^ | CAST_FUNC_CALL^ | STR_FUNC_CALL^ | TRIM_CALL^ | DATE_FUNC_CALL^ | TWO_ARG_FUNC_CALL^;

        BRACKET_EXPR -> '('! EXPR^ ')'!;

        SELECT_EXPR -> '('! SELECT ')'!;

        PARAM -> (':'! | '?'! | '@'!) IDENTIFIER;

        SIMPLE_EXPR -> FIELD^ |
                       PARAM^ |
                       FUNC_CALL^ |
                       BRACKET_EXPR^ |
                       CONSTANT^ |
                       SELECT_EXPR^ |
                       AGGR_CALL^;

        UNARY_EXPR -> SIMPLE_EXPR^ |
                      MINUS_OP^ SIMPLE_EXPR |
                      PLUS_OP^ SIMPLE_EXPR;

        MUL_EXPR -> UNARY_EXPR^ |
                    MUL_EXPR MUL_OP^ UNARY_EXPR |
                    MUL_EXPR DIV_OP^ UNARY_EXPR;

        ADD_EXPR -> MUL_EXPR^ |
                    ADD_EXPR PLUS_OP^ MUL_EXPR |
                    ADD_EXPR MINUS_OP^ MUL_EXPR |
                    ADD_EXPR CONCAT_OP^ MUL_EXPR;

        CONCAT_EXPR -> SIMPLE_EXPR^ | CONCAT_EXPR CONCAT_OP^ SIMPLE_EXPR;

        COM_EXPR -> ADD_EXPR^ | CONCAT_EXPR^;

        REL_EXPR -> ADD_EXPR^ |
                    REL_EXPR EQ_OP^ COM_EXPR |
                    REL_EXPR NEQ_OP^ COM_EXPR |
                    REL_EXPR GT_OP^ COM_EXPR |
                    REL_EXPR GE_OP^ COM_EXPR |
                    REL_EXPR LT_OP^ COM_EXPR |
                    REL_EXPR LE_OP^ COM_EXPR;

        LIKE_EXPR -> CONCAT_EXPR  LIKE_OP^ CONCAT_EXPR | CONCAT_EXPR  NOT_LIKE_OP^ CONCAT_EXPR;

        IN_PREDICATE -> CONCAT_EXPR IN_OP^ IN_PREDICATE_VALUE | CONCAT_EXPR NOT_IN_OP^ IN_PREDICATE_VALUE;
        
        IN_PREDICATE_VALUE -> '('! SELECT^ ')'! | IN_VALUE_LIST^;
        IN_VALUE_ARGS -> EXPR (','! EXPR)*;
        IN_VALUE_LIST -> '('! IN_VALUE_ARGS^ ')'!;

        EXISTS_PREDICATE -> EXISTS_OP^ '('! SELECT ')'! | NOT_EXISTS_OP^ '('! SELECT ')'!;

        NULL_PREDICATE -> EXPR NULL_OP^ | EXPR NOT_NULL_OP^;


        COMPARE_EXPR -> REL_EXPR^ | LIKE_EXPR^ | IN_PREDICATE^ | NULL_PREDICATE^ | EXISTS_PREDICATE^;

        NOT_OP -> 'NOT'!;
        AND_OP -> 'AND'!;
        OR_OP -> 'OR'!;

        UX_BOOL_EXPR -> COMPARE_EXPR^ |
                        NOT_OP^ COMPARE_EXPR;

        AND_BOOL_EXPR -> UX_BOOL_EXPR^ |
                         AND_BOOL_EXPR AND_OP^ UX_BOOL_EXPR;

        OR_BOOL_EXPR -> AND_BOOL_EXPR^ |
                        OR_BOOL_EXPR OR_OP^ AND_BOOL_EXPR;

        EXPR -> OR_BOOL_EXPR^;

        BOOL_EXPR -> OR_BOOL_EXPR^;

        SET_QUANTIFIER -> 'DISTINCT' | 'ALL';

        ASTERISK -> '*';

        AGGR_CALL_BRACKET -> '('! FIELD^ ')'!;
        AGGR_FUNC -> 'COUNT' | 'MAX' | 'MIN' | 'AVG' | 'SUM';
        AGGR_COUNT_ALL -> 'COUNT(*)'!;
        AGGR_CALL -> AGGR_FUNC^ AGGR_CALL_BRACKET | AGGR_COUNT_ALL^;

        SELECT_SUBLIST -> EXPR_ALIAS (','! EXPR_ALIAS)*;

        EXPR_ALIAS -> EXPR ('AS'! IDENTIFIER)?;

        FIELD -> IDENTIFIER('.'! IDENTIFIER)?;

        SELECT_LIST -> ASTERISK | SELECT_SUBLIST;

        TABLE_EXPRESSION -> FROM_CLAUSE (WHERE_CLAUSE)?;

        WHERE_CLAUSE -> 'WHERE'! BOOL_EXPR;

        HAVING_CLAUSE -> 'HAVING'! BOOL_EXPR;

        FROM_CLAUSE -> 'FROM'! TABLE_REFERENCE_LIST;

        TABLE_REFERENCE_LIST -> TABLE_PRIMARY (TABLE_REFERENCE)*;

        TABLE_REFERENCE -> (','! TABLE_PRIMARY) | ((JOIN_TYPE)? 'JOIN'! TABLE_PRIMARY JOIN_CONDITION);

        TABLE_NAME -> IDENTIFIER;

        TABLE_PRIMARY -> TABLE_NAME ('AS'! IDENTIFIER)?;

        JOIN_TYPE_INNER -> 'INNER'!;

        JOIN_TYPE_LEFT -> 'LEFT'! 'OUTER'!?;
        
        JOIN_TYPE_RIGHT -> 'RIGHT'! 'OUTER'!?;

        JOIN_TYPE_FULL -> ('FULL'! 'OUTER'!) | 'FULL'! | 'OUTER'!;

        JOIN_TYPE -> JOIN_TYPE_INNER | JOIN_TYPE_LEFT | JOIN_TYPE_RIGHT | JOIN_TYPE_FULL;

        JOIN_CONDITION -> 'ON'! BOOL_EXPR;

        SELECT -> 'SELECT'! (SET_QUANTIFIER)? SELECT_LIST TABLE_EXPRESSION GROUP_BY? HAVING_CLAUSE? ORDER_BY? LIMIT_OFFSET? EOS!;

        ORDER_BY -> 'ORDER BY'! SORT_SPECIFICATION_LIST^;

        SORT_SPECIFICATION_LIST -> SORT_SPECIFICATION (','! SORT_SPECIFICATION)*;

        SORT_SPECIFICATION -> EXPR (ORDERING_SPECIFICATION)?;

        ORDERING_SPECIFICATION -> 'ASC'^ | 'DESC'^;

        GROUP_BY -> 'GROUP BY'! GROUP_SPECIFICATION_LIST^;

        GROUP_SPECIFICATION_LIST -> GROUP_SPECIFICATION (','! GROUP_SPECIFICATION)*;

        GROUP_SPECIFICATION -> EXPR;

        LIMIT_OFFSET -> LIMIT (OFFSET)? | OFFSET (LIMIT)?;

        LIMIT -> 'LIMIT'! INT;
        OFFSET -> 'OFFSET'! INT;

        INSERT -> 'INSERT'! 'INTO'! TABLE_NAME FIELDS_LIST TO_INSERT;

        FIELDS -> FIELD (','! FIELD)*;
        FIELDS_LIST -> '('! FIELDS^ ')'!;

        INSERT_VALUE -> CONSTANT | PARAM;

        INSERT_VALUES -> INSERT_VALUE (','! INSERT_VALUE)*;
        INSERT_VALUES_LIST -> 'VALUES'! '('! INSERT_VALUES ')'! ;

        TO_INSERT -> INSERT_VALUES_LIST^ | SELECT^;

        UPDATE -> 'UPDATE'!  TABLE_NAME 'SET'! UPDATE_LIST (WHERE_CLAUSE)?;
        UPDATE_LIST -> UPDATE_ASSIGN (','! UPDATE_ASSIGN)*;
        UPDATE_ASSIGN -> FIELD '='! UPDATE_OPERAND;
        UPDATE_OPERAND -> EXPR^ | '('! SELECT^ ')'! ;

        DELETE -> 'DELETE'! 'FROM'! TABLE_NAME (WHERE_CLAUSE)?;

        CREATE_VIEW -> 'CREATE'! 'VIEW'! TABLE_NAME 'AS'! SELECT;

        CREATE_INDEX -> 'CREATE'! 'INDEX'! TABLE_NAME 'ON'! TABLE_NAME '('! SORT_SPECIFICATION_LIST ')'!; 

        IF_EXIST -> 'IF'! 'EXISTS'!;

        DROP_TABLE -> 'DROP'! 'TABLE'! IF_EXIST? TABLE_NAME;

        DROP_VIEW -> 'DROP'! 'VIEW'! IF_EXIST? TABLE_NAME;

        DROP_INDEX -> 'DROP'! 'INDEX'! IF_EXIST? TABLE_NAME 'ON'! TABLE_NAME;

        FIELD_DEFINITION_NAME -> IDENTIFIER;

        FIELD_DEFINITION_SIZE -> '('! INT ( ','! INT )? ')'!;
        
        FIELD_DEFINITION_TYPE -> IDENTIFIER FIELD_DEFINITION_SIZE?;

        FIELD_DEFINITION_FLAG_NOT_NULL -> 'NOT'! 'NULL'!;

        FIELD_DEFINITION_FLAG_UNIQUE -> 'UNIQUE'!;

        FIELD_DEFINITION_FLAG_PRIMARY_KEY -> 'PRIMARY'! 'KEY'!;

        FIELD_DEFINITION_FLAG_FOREIGN_KEY -> 'FOREIGN'! 'KEY'! 'REFERENCES'! TABLE_NAME '('! FIELD_DEFINITION_NAME ')'!;

        FIELD_DEFINITION_FLAG_DEFAULT -> 'DEFAULT'! EXPR;

        FIELD_DEFINITION_FLAG_AUTOINCREMENT -> 'AUTOINCREMENT'!;

        FIELD_DEFINITION_FLAG -> FIELD_DEFINITION_FLAG_NOT_NULL | FIELD_DEFINITION_FLAG_UNIQUE | FIELD_DEFINITION_FLAG_PRIMARY_KEY | FIELD_DEFINITION_FLAG_FOREIGN_KEY | FIELD_DEFINITION_FLAG_DEFAULT | FIELD_DEFINITION_FLAG_AUTOINCREMENT;

        FIELD_DEFINITION_FLAGS -> FIELD_DEFINITION_FLAG FIELD_DEFINITION_FLAG*;

        FIELD_DEFINITION -> FIELD_DEFINITION_NAME FIELD_DEFINITION_TYPE FIELD_DEFINITION_FLAGS?;

        FOREIGN_KEY_DEFINITION -> 'FOREIGN'! 'KEY'! '('! FIELD_DEFINITION_NAME ')'! 'REFERENCES'! TABLE_NAME '('!  FIELD_DEFINITION_NAME ')'!;

        CREATE_TABLE_CLAUSE -> FIELD_DEFINITION | FOREIGN_KEY_DEFINITION;

        CREATE_TABLE_CLAUSES -> CREATE_TABLE_CLAUSE (','! CREATE_TABLE_CLAUSE)*;

        CREATE_TABLE -> 'CREATE'! 'TABLE'! TABLE_NAME '('! CREATE_TABLE_CLAUSES ')'!;

        ADD_FIELD_CLAUSE -> 'ADD'! 'COLUMN'! FIELD_DEFINITION;

        DROP_FIELD_CLAUSE -> 'DROP'! 'COLUMN'! FIELD_DEFINITION_NAME;

        ADD_CONTRAINT_CLAUSE -> 'ADD'! FOREIGN_KEY_DEFINITION;

        ALTER_TABLE_CLAUSE -> ADD_FIELD_CLAUSE | DROP_FIELD_CLAUSE | ADD_CONTRAINT_CLAUSE;

        ALTER_TABLE -> 'ALTER'! 'TABLE'!  TABLE_NAME ALTER_TABLE_CLAUSE;

        DEBUG_EXPR -> 'DEBUG'! EXPR;

        UNION_DISTINCT -> 'UNION'!;

        UNION_ALL -> 'UNION'! 'ALL'!;

        UNION_OP -> UNION_DISTINCT | UNION_ALL;

        UNION -> SELECT UNION_OP SELECT (UNION_OP SELECT)* ORDER_BY?;

        STATEMENT  -> SELECT^ | INSERT^ | UPDATE^ | DELETE^ | 
                      CREATE_TABLE^ | CREATE_VIEW^ | CREATE_INDEX^ | 
                      ALTER_TABLE ^ | 
                      DROP_TABLE^ | DROP_INDEX^ | DROP_VIEW^ | 
                      DEBUG_EXPR | UNION^ |
                      NOP;

        ROOT -> STATEMENT STATEMENT*;
    }
}