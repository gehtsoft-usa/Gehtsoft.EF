<?xml version="1.0" encoding="windows-1252"?>
<doc>
  <assembly>
    <name>Gehtsoft.EF.Db.SqlDb</name>
  </assembly>
  <members>
    <member name="T:Gehtsoft.EF.Db.SqlDb.IDbQuery">
      <summary>An interface to generic query.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.IDbQuery.BindNull(System.String,System.Data.DbType)">
      <summary>Binds a null value to the parameter.</summary>
      <param name="name">The name of the parameter (do not use DB-specific parameter prefixes, such as @ or :).</param>
      <param name="type">The parameter datatype. Most DBs (e.g. MSSQL, SQLite) will access null of any type, but some may
require the exact type.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.IDbQuery.BindOutputParam(System.String,System.Data.DbType)">
      <summary>Binds output parameter.</summary>
      <param name="name">The name of the parameter (do not use DB-specific parameter prefixes, such as @ or :).</param>
      <param name="type">The parameter datatype.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.IDbQuery.BindParam``1(System.String,``0)">
      <summary>Binds the parameter of the type specified.</summary>
      <param name="name">The name of the parameter (do not use DB-specific parameter prefixes, such as @ or :).</param>
      <param name="value">The value of the parameter.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.IDbQuery.GetParamValue``1(System.String)">
      <summary>Gets the parameter value</summary>
      <param name="name">The name of the parameter (do not use DB-specific parameter prefixes, such as @ or :).</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.IDbQuery.ExecuteNoData">
      <summary>Execute the query without creating resultset.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.IDbQuery.ExecuteReader">
      <summary>Execute the query creating the resultset.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.IDbQuery.ReadNext">
      <summary>Reads the next row.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.IDbQuery.IsNull(System.Int32)">
      <summary>Checks whether the column is null.</summary>
      <param name="column">The index of the column or the name of the column.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.IDbQuery.GetValue``1(System.Int32)">
      <summary>Gets the value of the column.</summary>
      <param name="column">The index of the column or the name of the column.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.IDbQuery.FindField(System.String)">
      <summary>Finds the index of the column by its name.</summary>
      <param name="column">The name of the column.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.IResiliencyPolicy">
      <summary>The interface to a resiliency policy provider.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.IResiliencyPolicy.Execute(System.Action)">
      <summary>The group of methods that executes a synchronous action.</summary>
      <param name="TResult" />
      <param name="action" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.IResiliencyPolicy.ExecuteAsync(System.Func`1)">
      <summary>The group of methods that executes an asynchronous action.</summary>
      <param name="TResult" />
      <param name="action" />
      <param name="token" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.ResiliencyPolicyDictionary">
      <summary>The resiliency policy dictionary.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.ResiliencyPolicyDictionary.SetGlobalPolicy(Gehtsoft.EF.Db.SqlDb.IResiliencyPolicy,System.Boolean)">
      <summary>Sets a global (applied for all connections) policy.</summary>
      <param name="policy">The policy.</param>
      <param name="forceOverride">The flag indicating whether the method can override previously set policy.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.ResiliencyPolicyDictionary.SetPolicy(System.String,Gehtsoft.EF.Db.SqlDb.IResiliencyPolicy,System.Boolean)">
      <summary>Sets the policy for a particular econnection.</summary>
      <param name="connectionString">The connection string that will be used to create the connection.</param>
      <param name="policy">The policy.</param>
      <param name="forceOverride">The flag indicating whether the method can override previously set policy.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.ResiliencyPolicyDictionary.GetPolicy(System.String)">
      <summary>Gets the policy for a particular connection.</summary>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.ResiliencyPolicyDictionary.Instance">
      <summary>Returns an instance of the signletone policy dictionary object.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.SelectQueryTypeBinder">
      <summary>Autobinder between a cursor and an object.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SelectQueryTypeBinder.#ctor(System.Type)">
      <summary>Constructor.</summary>
      <param name="type">The datatype to be bound.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SelectQueryTypeBinder.AddBinding(System.String,System.String,System.Boolean)">
      <summary>Bind a column to a property.</summary>
      <param name="columnName">The name of the resultset column.</param>
      <param name="property">The name of the property.</param>
      <param name="pk">The flag indicating whether the value is a primary key.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SelectQueryTypeBinder.AddBinding(Gehtsoft.EF.Db.SqlDb.SelectQueryTypeBinder,System.String)">
      <summary>Bind a connected object.</summary>
      <param name="binder">The binder for attached property.</param>
      <param name="property">The property to be bound.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SelectQueryTypeBinder.AutoBind(System.String)">
      <summary>Bind the cursor automatically.</summary>
      <param name="prefix">The database prefix of the column names.
The the value is null, the column names are considered to be equal to the
property names.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SelectQueryTypeBinder.Read(Gehtsoft.EF.Db.SqlDb.SqlDbQuery)">
      <summary>Reads an object from the current row of the cursor (returns an instance of object).</summary>
      <param name="query" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SelectQueryTypeBinder.Read``1(Gehtsoft.EF.Db.SqlDb.SqlDbQuery)">
      <summary>Reads an object from the current row of the cursor (returns an instance of the specified type).</summary>
      <param name="query" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.SqlDbConnection">
      <summary>Generic SQL connection class.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.Connection">
      <summary>Gets the underlying SQL connection.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.SyncRoot">
      <summary>Gets the synchronization root.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.BeginTransaction">
      <summary>Begins a transaction.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.GetQuery">
      <summary>Creates a new query.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.GetQuery(System.String)">
      <summary>Gets a new query with the specified query command (as string).</summary>
      <param name="queryText" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.GetQuery(Gehtsoft.EF.Db.SqlDb.QueryBuilder.AQueryBuilder)">
      <summary>Gets a new query with the specified query command (as query builder).</summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.GetCreateTableBuilder(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor)">
      <summary>Gets query builder for create table operation</summary>
      <param name="descriptor" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.GetDropTableBuilder(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor)">
      <summary>Gets query builder for drop table operation</summary>
      <param name="descriptor" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.GetInsertQueryBuilder(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor)">
      <summary>Gets query builder for insert operation</summary>
      <param name="descriptor" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.GetUpdateQueryBuilder(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor)">
      <summary>Gets query builder for update operation.</summary>
      <param name="descriptor" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.GetDeleteQueryBuilder(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor)">
      <summary>Gets query builder for delete operation</summary>
      <param name="descriptor" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.GetHierarchicalSelectQueryBuilder(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor,Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo,System.String)">
      <summary>Gets query builder for select a subtree from a self-connected table.</summary>
      <param name="descriptor">The table descriptor.</param>
      <param name="parentReferenceColumn">The column which references to the primary key of the parent row. The value for this column
for the root row is considered to be a null.</param>
      <param name="rootParameter">The parameter name to set the root of the resultset.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.GetSelectQueryBuilder(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor)">
      <summary>Gets query builder for select operation</summary>
      <param name="descriptor" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.GetParameterGroupBuilder">
      <summary>Creates a parameter list pseudo-query builder.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbConnection.GetLanguageSpecifics">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.AutoincrementReturnStyle">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.AutoincrementReturnStyle.Parameter">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.AutoincrementReturnStyle.FirstResultset">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.AutoincrementReturnStyle.SecondResultset">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics">
      <summary>The specific data for the database server</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.TerminateWithSemicolon">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.SupportsTransactions">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.PreBlock">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.PostBlock">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.PreQueryInBlock">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.PostQueryInBlock">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.ParameterInQueryPrefix">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.ParameterPrefix">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.TableAliasInSelect">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.AllNonAggregatesInGroupBy">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.RightJoinSupported">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.OuterJoinSupported">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.DropColumnSupported">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.ModifyColumnSupported">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.AutoincrementReturnedAs">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.MinDate">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.MaxDate">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.MinTimestamp">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.MaxTimestamp">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.TransactionSupport">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.TransactionSupport.None">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.TransactionSupport.Plain">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics.TransactionSupport.Nested">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.SqlDbQuery">
      <summary>SQL Query.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.BindParam``1(System.String,``0)">
      <summary>Bind parameter value.</summary>
      <param name="name">The name of the parameter.</param>
      <param name="value">The parameter value.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.BindNull(System.String,System.Data.DbType)">
      <summary>Binds null as a parameter value.</summary>
      <param name="name">The name.</param>
      <param name="type">The value type.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.BindOutput(System.String,System.Data.DbType)">
      <summary>Binds an output parameter.</summary>
      <param name="name">The name.</param>
      <param name="type">The value type.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.ExecuteNoData">
      <summary>Execute query without reading the result cursor.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.GetParamValue(System.String)">
      <summary>Returns the parameter value.</summary>
      <param name="name" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.ExecuteReader">
      <summary>Execute query with reading the result cursor.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.Field(System.String)">
      <summary>Finds field by its name.</summary>
      <param name="name" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.NextReaderResult">
      <summary>Starts reading the next cursor.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.ReadNext">
      <summary>Reads the next row of the cursor.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.IsNull(System.Int32)">
      <summary>Checks whether the column specified is null (by index index of the column).</summary>
      <param name="column" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.IsNull(System.String)">
      <summary>Checks whether the column specified is null (by the name of the column).</summary>
      <param name="column" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.GetValue``1(System.Int32)">
      <summary>Gets the value of the column.</summary>
      <param name="T">The desired data type</param>
      <param name="column">The index of the column</param>
      <param name="field">The field name</param>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.Connection">
      <summary>Gets the connection.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.CommandText">
      <summary>The text of the SQL command.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.FieldCount">
      <summary>The number of the fields in the result set.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.Cancel">
      <summary>Cancels execution of the query</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.ReadBlobAsStream">
      <summary>The flag indicating whether blob fields must be read as stream.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.GetStream(System.Int32)">
      <summary>The method returns blob value as an i/o stream</summary>
      <param name="column">The column index.</param>
      <param name="field">The field name.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.FieldInfo">
      <summary>Information about a cursor column.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.FieldInfo.Name">
      <summary>The name of the column.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.FieldInfo.DataType">
      <summary>The type of the database.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlDbQuery.FieldInfo.Index">
      <summary>The index of the column.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.SqlDbTransaction">
      <summary>Database transaction.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbTransaction.Rollback">
      <summary>Rollback (cancel) the transaction.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.SqlDbTransaction.Commit">
      <summary>Commit the transaction.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.SqlInjectionProtectionPolicy">
      <summary>The class that manages the policy for SQL Injection protection.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlInjectionProtectionPolicy.ProtectFromScalarsInQueries">
      <summary>Turns SQL Injection protection on or off.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.SqlInjectionProtectionPolicy.Instance">
      <summary>Gets the singleton instance of the policy.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.UniversalSqlDbFactory">
      <summary>Universal Connection Factory</summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.UniversalSqlDbFactory.MSSQL">
      <summary>Id for MSSQL</summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.UniversalSqlDbFactory.MYSQL">
      <summary>Id for MySQL and MariaDB</summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.UniversalSqlDbFactory.ORACLE">
      <summary>Id for Oracle</summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.UniversalSqlDbFactory.POSTGRES">
      <summary>Id for PostgreSQL</summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.UniversalSqlDbFactory.SQLITE">
      <summary>Id for SQLite</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.UniversalSqlDbFactory.FindDriver(System.String,System.String@,System.String@)">
      <summary>Finds the driver</summary>
      <param name="dbname">The database id.</param>
      <param name="assemblyName">Output: the name of the assembly.</param>
      <param name="className">Output: the name of the factory class.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.UniversalSqlDbFactory.LoadFactory(System.String)">
      <summary>Loads factory and returns the delegate for creating a connection.</summary>
      <param name="dbname">The database id.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.UniversalSqlDbFactory.Create(System.String,System.String)">
      <summary>Create a connection.</summary>
      <param name="dbname">The database id.</param>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.UniversalSqlDbFactory.Create(System.String,System.String)">
      <summary>Create a connection.</summary>
      <param name="dbname">The database id.</param>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.UniversalSqlDbFactory.SupportedDatabases">
      <summary>Returns the list of the supported database ids.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.UpdateQueryToTypeBinder">
      <summary>Autobinder between an object and a query.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.UpdateQueryToTypeBinder.#ctor(System.Type)">
      <summary>Constructor.</summary>
      <param name="type">The type of the object to be bound.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.UpdateQueryToTypeBinder.AddBinding(System.String,System.String,System.Data.DbType,System.Int32,System.Boolean)">
      <summary>Bind a property.</summary>
      <param name="parameterName">The name of the parameter.</param>
      <param name="propertyName">The name of the property.</param>
      <param name="dbType">The database type.</param>
      <param name="size">The maximum size of the value.</param>
      <param name="outputOnInsert">The flag indicating whether the value is provided by the server during
the insert (e.g. autoincrement).</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.UpdateQueryToTypeBinder.BindAndExecute(Gehtsoft.EF.Db.SqlDb.SqlDbQuery,System.Object,System.Nullable{System.Boolean})">
      <summary>Bind the object and execute the query.</summary>
      <param name="query">The query.</param>
      <param name="value">The object to be bound.</param>
      <param name="insert">The flag indicating whether it is an insert or an update operation.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.AQueryBuilder">
      <summary>Abstract query builder which is used as a base class for all other query builder.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.AQueryBuilder.PrepareQuery">
      <summary>Generates the query text.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.AQueryBuilder.Query">
      <summary>The query text.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder">
      <summary>The condition builder for the where and having clause of the query.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder.Add(Gehtsoft.EF.Entities.LogOp,System.String)">
      <summary>Adds a new condition using condition builder</summary>
      <param name="logOp">The logical operation to join this condition with prior conditions.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder.Add(Gehtsoft.EF.Entities.LogOp,System.String)">
      <summary>Adds a raw expression to the condition.</summary>
      <param name="logOp">The logical operation to join this condition with prior conditions.</param>
      <param name="rawExpression">The raw expression.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder.Add(Gehtsoft.EF.Entities.LogOp,System.String,Gehtsoft.EF.Entities.CmpOp,System.String)">
      <summary>Makes the expression on raw left side, the operation code and raw right side.</summary>
      <param name="logOp">The logical operation to join this condition with prior conditions</param>
      <param name="leftSide">The raw left side of the expression. The left side is optional for Exists and NotExists operations.</param>
      <param name="cmpOp">The operation code.</param>
      <param name="rightSide">The raw right side of the expression. The right is optional for IsNull and NotNull operations.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder.Property(Gehtsoft.EF.Entities.AggFn,Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity,Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo)">
      <summary>Starts the next condition with the property as the left side operation.</summary>
      <param name="entity">The entity to which the column belongs to (the first entity in the query by default).</param>
      <param name="columnInfo">The table column.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder.PropertyName(Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity,Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo)">
      <summary>Returns the raw expression for the table column for the current database.</summary>
      <param name="aggFn">The aggregate function to apply at the column (this option may be used for having conditions only).</param>
      <param name="entity">The entity to which the column belongs to (the first entity in the query by default).</param>
      <param name="columnInfo">The table column.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder.Parameter(System.String)">
      <summary>Returns the correct raw expression for the parameter name.</summary>
      <param name="parameterName" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder.Parameters(System.String[])">
      <summary>Return the correct raw expression for a list of the parameters.</summary>
      <param name="parameterNames" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder.Query(Gehtsoft.EF.Db.SqlDb.QueryBuilder.AQueryBuilder)">
      <summary>Returns the correct raw expression for a subquery.</summary>
      <param name="queryBuilder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder.AddGroup(Gehtsoft.EF.Entities.LogOp)">
      <summary>Starts a new group enclosed into the brackets</summary>
      <param name="logOp">The logical operations to join the group of conditions with prior conditions.</param>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder.IsEmpty">
      <summary>Returns the flag indicating whether the where condition is empty.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilderExtension">
      <summary>The extension class providing syntax sugar for ConditionBuilder</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilderExtension.And(Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilderExtension.Or(Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilderExtension.Property(Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder,Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity,Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo)">
      <summary></summary>
      <param name="builder" />
      <param name="entity" />
      <param name="columnInfo" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilderExtension.Property(Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder,Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo)">
      <summary></summary>
      <param name="builder" />
      <param name="columnInfo" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilderExtension.Reference(Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder,Gehtsoft.EF.Db.SqlDb.EntityQueries.ConditionEntityQueryBase.InQueryName)">
      <summary></summary>
      <param name="builder" />
      <param name="reference" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilderExtension.Exists(Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilderExtension.NotExists(Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilderExtension.Raw(Gehtsoft.EF.Db.SqlDb.QueryBuilder.ConditionBuilder,System.String)">
      <summary></summary>
      <param name="builder" />
      <param name="rawExpression" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.CreateTableBuilder">
      <summary>The query builder that generates a create table query.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.DeleteQueryBuilder">
      <summary>Query builder for delete operation.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.DeleteQueryBuilder.DeleteById">
      <summary>Add a condition to delete a row by its primary key.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.DropTableBuilder">
      <summary>The query builder that generates a drop table query.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.HierarchicalSelectQueryBuilder">
      <summary>A query to select the subtree from the self-connected table.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.HierarchicalSelectQueryBuilder.GetTableDescriptor">
      <summary>Gets the table descriptor of the resultset.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.HierarchicalSelectQueryBuilder.IdOnlyMode">
      <summary>The flag indicating whether the resultset should consists of ids only.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.InsertQueryBuilder">
      <summary>The query builder that generates a Insert table query.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ParameterGroupQueryBuilder">
      <summary>The builder of a pseudo-subquery with the list of the parameters to use it in IN and NOT IN operators.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.ParameterGroupQueryBuilder.AddParameter(System.String)">
      <summary>Add the parameter to the list.</summary>
      <param name="parameter" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity">
      <summary>An entity inside a select query.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity.Table">
      <summary>The table.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity.ConnectingField">
      <summary>The field of the table which is used to connect this table to another entity.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity.Alias">
      <summary>The alias of the table inside the query.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity.JoinType">
      <summary>The type of the join.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity.ConnectedToTable">
      <summary>The query entity to which this table is connected to.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity.ConnectedToField">
      <summary>The field of another entity which is used to connect this table to another entity.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity.On">
      <summary>The joining condition.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntityCollection">
      <summary>The collection of the entities in the select query.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntityCollection.Count">
      <summary>Returns the number of the entities.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntityCollection.Item(System.Int32)">
      <summary>Returns the entity by its index.</summary>
      <param name="index" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryWithWhereBuilder">
      <summary>The base class for all queries which has WHERE condition.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryWithWhereBuilder.GetAlias(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo,Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity)">
      <summary>Returns the alias of the column inside the query.</summary>
      <param name="columnInfo">The column.</param>
      <param name="entity">The query entity corresponding to the table to which the column belongs to.
If the entity is not specified, the alias of the first occurrence of the table is returned.</param>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryWithWhereBuilder.IsWhereEmpty">
      <summary>Returns flag indicating whether the query has no conditions.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryWithWhereBuilder.Where">
      <summary>The where condition of the query.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder">
      <summary>Select query builder.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryWithWhereBuilder.Entities">
      <summary>Returns the collection of entities inside of the query.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder.AddTable(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor,Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo,Gehtsoft.EF.Entities.TableJoinType,Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity,Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo)">
      <summary>Add a new table to the query.</summary>
      <param name="table">The table descriptor.</param>
      <param name="connectingColumn">The column of the table to be used to connect the table to another entity.</param>
      <param name="joinType">The join type.</param>
      <param name="connectToTable">The query entity to connect the specified table to.</param>
      <param name="connectToColumn">The column of the entity to be use to connect the specified table to.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder.AddTable(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor,System.Boolean)">
      <summary>Add a table to the query and connect it automatically.</summary>
      <param name="table">The table to be connected.</param>
      <param name="autoConnect" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder.AddExpressionToResultset(System.String,System.Data.DbType,System.Boolean,System.String)">
      <summary>Add an expression to the result set of the query.</summary>
      <param name="expression">The expression to be added. Please be aware that the framework uses expressions as is.</param>
      <param name="type">The datatype returned by the expression.</param>
      <param name="isAggregate">The flag indicating whether the expression is an aggregate expression.</param>
      <param name="alias">The column alias.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder.AddToResultset(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo,Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity,System.String)">
      <summary>Add a table column to the resultset.</summary>
      <param name="aggregate">The aggregate function to be applied.</param>
      <param name="column">The table column to be added.</param>
      <param name="entity">The select query entity to which the table column belongs to. If the entity is not specified, the
first occurrence of the table in the query will be used.</param>
      <param name="alias">The column alias.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder.AddToResultset(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor,Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity,System.String)">
      <summary>Add all columns of the table to the results.</summary>
      <param name="table">The table descriptor.</param>
      <param name="entity">The select query entity to which the table belongs to. If the entity is not specified, the
first occurrence of the table in the query will be used.</param>
      <param name="aliasPrefix">The prefix to be added in front of the column name to make a result column name. E.g. if prefix is "a_" and
the column name is "b" then the result name will be "a_b".</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder.AddOrderBy(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo,Gehtsoft.EF.Entities.SortDir)">
      <summary>Add the column to the order by list.</summary>
      <param name="column">The table column to be added.</param>
      <param name="entity">The select query entity to which the table column belongs to. If the entity is not specified, the
first occurrence of the table in the query will be used.</param>
      <param name="direction" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder.AddGroupBy(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo,Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity)">
      <summary></summary>
      <param name="column">The table column to be added.</param>
      <param name="entity">The select query entity to which the table column belongs to. If the entity is not specified, the
first occurrence of the table in the query will be used.</param>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder.Distinct">
      <summary>Flag indicating whether distinct set of records needs to be selected.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder.Skip">
      <summary>The value indicating how many rows from the start of the results needs to be skipped.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder.Limit">
      <summary>The value limits the size of the resultset.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder.Having">
      <summary>The having condition of the query.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SelectQueryBuilder.QueryTableDescriptor">
      <summary>The table descriptor of the query resultset.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder">
      <summary>The builder for a single condition.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder.Raw(System.String)">
      <summary>Add a raw expression part.</summary>
      <param name="rawExpression" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder.Property(Gehtsoft.EF.Entities.AggFn,Gehtsoft.EF.Db.SqlDb.QueryBuilder.QueryBuilderEntity,Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo)">
      <summary>Add a property as a expression part.</summary>
      <param name="entity">The entity to which the column belongs to (the first entity in the query by default).</param>
      <param name="columnInfo">The table column.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder.Parameter(System.String)">
      <summary>Adds a parameter as a part of the expression.</summary>
      <param name="name" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder.Parameters(System.String[])">
      <summary>Adds a list of parameters as a part of the expression.</summary>
      <param name="names" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder.Query(Gehtsoft.EF.Db.SqlDb.QueryBuilder.AQueryBuilder)">
      <summary>Adds a subquery as a part of the expression.</summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder.Is(Gehtsoft.EF.Entities.CmpOp)">
      <summary>Sets the comparison operator for the expression.</summary>
      <param name="op" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension">
      <summary>The extension class providing syntax sugar for SingleConditionBuilder</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Eq(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Neq(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Le(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Ls(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Ge(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Gt(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Like(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.In(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.NotIn(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Exists(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.NotExists(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Value(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder,System.Int32)">
      <summary></summary>
      <param name="builder" />
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Reference(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder,Gehtsoft.EF.Db.SqlDb.EntityQueries.ConditionEntityQueryBase.InQueryName)">
      <summary></summary>
      <param name="builder" />
      <param name="reference">The reference to a property inside an entity query.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Sum(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Avg(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Min(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Max(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Count(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Trim(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Upper(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Lower(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilderExtension.Abs(Gehtsoft.EF.Db.SqlDb.QueryBuilder.SingleConditionBuilder)">
      <summary></summary>
      <param name="builder" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo">
      <summary>Description of a table column.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.ID">
      <summary>The identifier of the column.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.Name">
      <summary>The name of the table column.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.DbType">
      <summary>The datatype of the table column.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.Size">
      <summary>The size of the table column.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.Precision">
      <summary>The precision (accuracy) of the numeric data.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.PrimaryKey">
      <summary>The flag indicating whether the column is a primary key.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.Autoincrement">
      <summary>The flag indicating whether the column is an autoincrement value.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.Sorted">
      <summary>The flag indicated that the column is indexed.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.Unique">
      <summary>The flag indicating whether the column is unique.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.Nullable">
      <summary>The flag indicating whether the column is nullable.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.ForeignKey">
      <summary>The flag indicating whether the column is a foreign key (e.g. reference to another table).</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.ForeignTable">
      <summary>The table to which the this column is referred.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.Table">
      <summary>The table to which this column belongs to.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo.FullName">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor">
      <summary>The descriptor of an SQL table for SQL query builders.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.#ctor(System.String)">
      <summary>Constructor by name.</summary>
      <param name="name">The name of the table.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.#ctor(System.String,System.Collections.Generic.IEnumerable{Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo})">
      <summary>Constructor by name and column set.</summary>
      <param name="name">The name of the table.</param>
      <param name="columns">The list of the columns.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.Add(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo)">
      <summary>Add a new column.</summary>
      <param name="column" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.Add(System.Collections.Generic.IEnumerable{Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo})">
      <summary>Add a list of columns.</summary>
      <param name="columns" />
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.Name">
      <summary>The name of the table.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.PrimaryKey">
      <summary>The primary key column.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.Count">
      <summary>The number of columns.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.Item(System.Int32)">
      <summary>The column by its index.</summary>
      <param name="index" />
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.Item(System.String)">
      <summary>The column by its name.</summary>
      <param name="name" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.QueryBuilder.UpdateQueryBuilder">
      <summary>Query builder for UPDATE operation.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.UpdateQueryBuilder.AddUpdateColumn(Gehtsoft.EF.Db.SqlDb.QueryBuilder.TableDescriptor.ColumnInfo)">
      <summary>Add one column to update.</summary>
      <param name="column">The column to be updated. The parameter with the same name as the column has will be created.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.UpdateQueryBuilder.AddUpdateAllColumns">
      <summary>Add all columns of the table to update.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.QueryBuilder.UpdateQueryBuilder.UpdateById">
      <summary>Add a condition to update a row by its primary key.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.AggFn">
      <summary>The list of aggregate functions</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.AggFn.Count">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.AggFn.Sum">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.AggFn.Avg">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.AggFn.Min">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.AggFn.Max">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.CmpOp">
      <summary>The list of comparison operations</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.Eq">
      <summary>a is equal to b</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.Neq">
      <summary>a is not equal to b</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.Ls">
      <summary>A is less than B</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.Le">
      <summary>A is less than or equal to B</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.Gt">
      <summary>A is greater than B</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.Ge">
      <summary>A is greater than or equal to B</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.Like">
      <summary>A is like B</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.In">
      <summary>A is IN (subquery)</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.NotIn">
      <summary>A is not IN (subquery)</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.IsNull">
      <summary>A is null</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.NotNull">
      <summary>A is not null</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.Exists">
      <summary>exists/is not empty (subquery)</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.CmpOp.NotExists">
      <summary>not exists/is empty (subquery)</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.EntityAttribute">
      <summary>The entity markup attribute.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityAttribute.Table">
      <summary>The name of the associated table.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityAttribute.Scope">
      <summary>The scope of the entity.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityAttribute.NamingPolicy">
      <summary>The database object naming policy.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.ObsoleteEntityAttribute">
      <summary>The obsolete entity markup attribute.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.ObsoleteEntityAttribute.Table">
      <summary>The name of the associated table.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.ObsoleteEntityAttribute.Scope">
      <summary>The scope of the entity.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.EntityCollection`1">
      <summary>Collection of entities</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityCollection`1.Find(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Finds an entity in the collection using specified comparer.</summary>
      <param name="entity" />
      <param name="comparer" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityCollection`1.Find(`0)">
      <summary>Finds an entity in the collection using the default comparer.</summary>
      <param name="entity" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityCollection`1.Contains(`0)">
      <summary>Checks whether collection consists of the the entity specified using default comparer.</summary>
      <param name="entity" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityCollection`1.Contains(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Checks whether collection consists of the the entity specified using the specified comparer.</summary>
      <param name="entity" />
      <param name="comparer" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityCollection`1.Add(`0)">
      <summary>Adds a new item into the collection.</summary>
      <param name="entity" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Add the range of the items into the collection.</summary>
      <param name="entities" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityCollection`1.Insert(System.Int32,`0)">
      <summary>Inserts and item at the specified position.</summary>
      <param name="index" />
      <param name="entity" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityCollection`1.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified position.</summary>
      <param name="index" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityCollection`1.Clear">
      <summary>Removes all items.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityCollection`1.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityCollection`1.Count">
      <summary>Returns the number of the items in the collection.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityCollection`1.Item(System.Int32)">
      <summary>Returns the item by its index.</summary>
      <param name="index" />
    </member>
    <member name="T:Gehtsoft.EF.Entities.EntityFinder">
      <summary>The class which can be used to gather information about the entities.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityFinder.FindEntities(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String,System.Boolean)">
      <summary>Finds entities in the specified assembly list.</summary>
      <param name="assemblies">The list of the assemblies to find entities.</param>
      <param name="scope">The name of the scope or null to take all scopes</param>
      <param name="includeObsolete">The flag indicating whether the obsolete entities must be also included.</param>
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityFinder.ArrageEntities(Gehtsoft.EF.Entities.EntityFinder.EntityTypeInfo[])">
      <summary>Sorts entity by dependencies.</summary>
      <param name="entities" />
    </member>
    <member name="T:Gehtsoft.EF.Entities.EntityFinder.EntityTypeInfo">
      <summary>The information about the entity.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityFinder.EntityTypeInfo.DoesDependOn(Gehtsoft.EF.Entities.EntityFinder.EntityTypeInfo)">
      <summary>Checks whether the entity depends on another entity.</summary>
      <param name="info" />
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityFinder.EntityTypeInfo.Scope">
      <summary>The name of the entity scope</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityFinder.EntityTypeInfo.EntityType">
      <summary>The .NET type of the entity.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityFinder.EntityTypeInfo.Obsolete">
      <summary>The flag indicating whether the entity is obsolete.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityFinder.EntityTypeInfo.Table">
      <summary>The name of the table associated with the entity.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityFinder.EntityTypeInfo.NamingPolicy">
      <summary>The naming policy associated with the entity</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityFinder.EntityTypeInfo.DependsOn">
      <summary>Returns the list of types that depends on this type.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityFinder.EntityTypeInfo.DependsOnInfo">
      <summary>Returns the list of entity type information of types that depends on this type.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.EntityNamingPolicy">
      <summary>The database naming policy</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.EntityNamingPolicy.Default">
      <summary>Use default policy set in entities manager.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.EntityNamingPolicy.BackwardCompatibility">
      <summary>Name the properties according the rules used before 1.1.3.3 release.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.EntityNamingPolicy.AsIs">
      <summary>The name of the property or class is used as is.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.EntityNamingPolicy.LowerCase">
      <summary>The name of the property is used in lower case.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.EntityNamingPolicy.UpperCase">
      <summary>The name of the property is used in upper case.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.EntityNamingPolicy.LowerFirstCharacter">
      <summary>The first character of the property is used in lower case, the rest is as is.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.EntityNamingPolicy.UpperFirstCharacter">
      <summary>The first character of the property is used in upper case, the rest is as is.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.EntityNamingPolicy.LowerCaseWithUnderscores">
      <summary>All characters of the name is converted to the lower case. The uppercase characters are prefixed with underscore.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.EntityNamingPolicy.UpperCaseWithUnderscopes">
      <summary>All characters of the name is converted to the upper case. The uppercase characters are prefixed with underscore.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.EntityObjectExtension">
      <summary>The class provides extensions for an object to get an entity primary key</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityObjectExtension.IsEfEntity(System.Object,System.Type)">
      <summary>The extension method returns true if the object is an entity of the specified type</summary>
      <param name="entity" />
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityObjectExtension.GetEfEntityId``1(System.Object)">
      <summary>The extension method that returns the primary key value</summary>
      <param name="T">The data type of the primary key.</param>
      <param name="entity" />
      <param name="desiredType">The expected type of the primary key</param>
      <param name="entityType">The expected type of the entity</param>
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityObjectExtension.GetEfPrimaryKey(System.Type)">
      <summary>The extension method that returns the property that is the primary key for the entity</summary>
      <param name="type">The type of the entity</param>
    </member>
    <member name="T:Gehtsoft.EF.Entities.EntityPropertyAttribute">
      <summary>The mark up of entity property attribute.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.EntityPropertyAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityPropertyAttribute.Field">
      <summary>The name of the table field.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityPropertyAttribute.DbType">
      <summary>The database type of the table field.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityPropertyAttribute.Size">
      <summary>The size of the field.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityPropertyAttribute.Precision">
      <summary>The precision (accuracy) of the numeric data.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityPropertyAttribute.AutoId">
      <summary>Marks the field is an automatic identifier.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityPropertyAttribute.PrimaryKey">
      <summary>The field is a primary key.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityPropertyAttribute.Autoincrement">
      <summary>The field is an autoincrement field.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityPropertyAttribute.ForeignKey">
      <summary>The field is a reference to another table.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityPropertyAttribute.Sorted">
      <summary>The field shall be indexed.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityPropertyAttribute.Unique">
      <summary>The field is unique.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityPropertyAttribute.Nullable">
      <summary>The field can accept null values.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.EntityPropertyAttribute.IgnoreRead">
      <summary>The field should be ignored by default in select entity queries</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.ObsoleteEntityPropertyAttribute">
      <summary>The mark up of obsolete entity property attribute.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.ObsoleteEntityPropertyAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.ObsoleteEntityPropertyAttribute.Field">
      <summary>The name of the table field.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.ObsoleteEntityPropertyAttribute.ForeignKey">
      <summary>The field is a reference to another table.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.LogOp">
      <summary>The list of logical operators.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.LogOp.Not">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.LogOp.And">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.LogOp.Or">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.OpBracket">
      <summary>The class which is used to automatically close bracket during the query generation.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.SortDir">
      <summary>The list of sorting directions.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.SortDir.Asc">
      <summary>Ascending (A-&gt;Z)</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.SortDir.Desc">
      <summary>Descending (Z-&gt;A)</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.TableJoinType">
      <summary>Type of table joins</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.TableJoinType.None">
      <summary>No join.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.TableJoinType.Inner">
      <summary>Inner join.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.TableJoinType.Left">
      <summary>Left outer join.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.TableJoinType.Right">
      <summary>Right outer join.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Entities.TableJoinType.Outer">
      <summary>Full outer join.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.Context.EntityContextExtension">
      <summary>The extension methods for a context and context queries.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.DropEntity``1(Gehtsoft.EF.Entities.Context.IEntityContext)">
      <summary>Gets a query to drop an entity (i.e. table or list) in the context.</summary>
      <param name="context" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.CreateEntity``1(Gehtsoft.EF.Entities.Context.IEntityContext)">
      <summary>Gets a query to create an entity (i.e. table or list) in the context.</summary>
      <param name="context" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.InsertEntity``1(Gehtsoft.EF.Entities.Context.IEntityContext,System.Boolean)">
      <summary>Gets a query to insert an entity object into the context.</summary>
      <param name="context" />
      <param name="createKey" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.UpdateEntity``1(Gehtsoft.EF.Entities.Context.IEntityContext)">
      <summary>Gets a query to update an entity object in the context.</summary>
      <param name="context" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.DeleteEntity``1(Gehtsoft.EF.Entities.Context.IEntityContext)">
      <summary>Gets a query to delete an entity object from the context.</summary>
      <param name="context" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.DeleteMultiple``1(Gehtsoft.EF.Entities.Context.IEntityContext)">
      <summary>Gets a query to delete multiple entity objects from the context.</summary>
      <param name="context" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.Select``1(Gehtsoft.EF.Entities.Context.IEntityContext)">
      <summary>Gets a query to select entity objects from the context.</summary>
      <param name="context" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.Count``1(Gehtsoft.EF.Entities.Context.IEntityContext)">
      <summary>Gets a query to count entity objects from the context.</summary>
      <param name="context" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.ReadOne``1(Gehtsoft.EF.Entities.Context.IContextSelect)">
      <summary>Reads one entity from a select query.</summary>
      <param name="query" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.ReadAll``2(Gehtsoft.EF.Entities.Context.IContextSelect)">
      <summary>Reads all objects from a select query.</summary>
      <param name="query" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.Get``1(Gehtsoft.EF.Entities.Context.IEntityContext,System.Object)">
      <summary>Gets an object from the context by its identifier</summary>
      <param name="context" />
      <param name="key" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.Exists``1(Gehtsoft.EF.Entities.Context.IEntityContext,System.Object)">
      <summary>Checks whether the object exists in the context.</summary>
      <param name="context" />
      <param name="key" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityContextExtension.Save``1(Gehtsoft.EF.Entities.Context.IEntityContext,``0)">
      <summary>Saves (inserts new, updates existing) entity in the context.</summary>
      <param name="context" />
      <param name="entity" />
    </member>
    <member name="T:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension">
      <summary>The extension methods for a filter.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.And(Gehtsoft.EF.Entities.Context.IContextFilter)">
      <summary>Add another condition to the filter and join it using AND</summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.Or(Gehtsoft.EF.Entities.Context.IContextFilter)">
      <summary>Add another condition to filter and join it using OR</summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.Property(Gehtsoft.EF.Entities.Context.IContextFilter,System.String)">
      <summary>Add comparison of the property specified to the filter and join to using AND</summary>
      <param name="builder" />
      <param name="name" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.IsNull(Gehtsoft.EF.Entities.Context.IContextFilter,System.String)">
      <summary>Add IsNull check to the filter and join it using AND</summary>
      <param name="builder" />
      <param name="name" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.IsNull(Gehtsoft.EF.Entities.Context.IContextFilterCondition)">
      <summary>Add IsNull operator to a condition</summary>
      <param name="condition" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.NotNull(Gehtsoft.EF.Entities.Context.IContextFilter,System.String)">
      <summary>Add not null operator to the filter and join it using AND</summary>
      <param name="builder" />
      <param name="name" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.NotNull(Gehtsoft.EF.Entities.Context.IContextFilterCondition)">
      <summary>Add not null operator to a condition</summary>
      <param name="condition" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.Eq(Gehtsoft.EF.Entities.Context.IContextFilterCondition)">
      <summary>Add equals to operator to a condition</summary>
      <param name="condition" />
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.Neq(Gehtsoft.EF.Entities.Context.IContextFilterCondition)">
      <summary>Add not equals to operator to a condition</summary>
      <param name="condition" />
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.Gt(Gehtsoft.EF.Entities.Context.IContextFilterCondition)">
      <summary>Add greater than operator to a condition</summary>
      <param name="condition" />
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.Ge(Gehtsoft.EF.Entities.Context.IContextFilterCondition)">
      <summary>Add greater than or equals to operator to a condition</summary>
      <param name="condition" />
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.Ls(Gehtsoft.EF.Entities.Context.IContextFilterCondition)">
      <summary>Add less than operator to a condition</summary>
      <param name="condition" />
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.Le(Gehtsoft.EF.Entities.Context.IContextFilterCondition)">
      <summary>Add less than or equals to operator to a condition</summary>
      <param name="condition" />
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.EntityFilterBuilderExtension.Like(Gehtsoft.EF.Entities.Context.IContextFilterCondition)">
      <summary>Add like operator to a condition</summary>
      <param name="condition" />
      <param name="value" />
    </member>
    <member name="T:Gehtsoft.EF.Entities.Context.IContextCount">
      <summary>The query that gets a count of rows</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IContextCount.GetCount">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.Context.IContextFilter">
      <summary>The definition of a query filter</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IContextFilter.AddGroup(Gehtsoft.EF.Entities.LogOp)">
      <summary>Start a group (multiple queries in brackets) of the condition.</summary>
      <param name="logOp" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IContextFilter.Add(Gehtsoft.EF.Entities.LogOp)">
      <summary>Add a single condition to the filter.</summary>
      <param name="op" />
    </member>
    <member name="T:Gehtsoft.EF.Entities.Context.IContextFilterCondition">
      <summary>A single condition of the filter.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IContextFilterCondition.Property(System.String)">
      <summary>Sets the property name.</summary>
      <param name="name" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IContextFilterCondition.Is(Gehtsoft.EF.Entities.CmpOp)">
      <summary>Sets the operator.</summary>
      <param name="op" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IContextFilterCondition.Value(System.Object)">
      <summary>Sets the value (may be used as the second operand only).</summary>
      <param name="value" />
    </member>
    <member name="T:Gehtsoft.EF.Entities.Context.IContextOrder">
      <summary>The order specification for a select query.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IContextOrder.Add(System.String,Gehtsoft.EF.Entities.SortDir)">
      <summary>Adds another field into a sort order.</summary>
      <param name="name" />
      <param name="sortDir" />
    </member>
    <member name="T:Gehtsoft.EF.Entities.Context.IContextQueryWithCondition">
      <summary>A query with filter condition.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.Context.IContextQueryWithCondition.Where">
      <summary>The filter.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.Context.IContextSelect">
      <summary>The query to select entities.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IContextSelect.ReadOne">
      <summary>Reads one entity.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.Context.IContextSelect.Order">
      <summary>Sets the order of the query result set.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.Context.IContextSelect.Take">
      <summary>Sets maximum number of entities to be select.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Entities.Context.IContextSelect.Skip">
      <summary>Sets the number of entities to skip.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.Context.IEntityContext">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IEntityContext.DropEntity(System.Type)">
      <summary></summary>
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IEntityContext.CreateEntity(System.Type)">
      <summary></summary>
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IEntityContext.InsertEntity(System.Type,System.Boolean)">
      <summary></summary>
      <param name="type" />
      <param name="createKey" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IEntityContext.UpdateEntity(System.Type)">
      <summary></summary>
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IEntityContext.DeleteEntity(System.Type)">
      <summary></summary>
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IEntityContext.DeleteMultiple(System.Type)">
      <summary></summary>
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IEntityContext.Select(System.Type)">
      <summary></summary>
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IEntityContext.Count(System.Type)">
      <summary></summary>
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IEntityContext.BeginTransaction">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.Context.IEntityContextTransaction">
      <summary>A transaction.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IEntityContextTransaction.Commit">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IEntityContextTransaction.Rollback">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.Context.IEntityQuery">
      <summary>A query to the entities in the context.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IEntityQuery.Execute">
      <summary>Executes the query.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Entities.Context.IModifyEntityQuery">
      <summary>A query that modifies a single entity in the context.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Entities.Context.IModifyEntityQuery.Execute(System.Object)">
      <summary>Executes the query for an entity specified.</summary>
      <param name="entity" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.FilterPropertyAttribute">
      <summary>Attribute to associate filter properties to entity properties.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.FilterPropertyAttribute.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.FilterPropertyAttribute.PropertyName">
      <summary>The name (or path) to the associated entity property.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.FilterPropertyAttribute.Operation">
      <summary>The comparison operation to be used.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter">
      <summary>The base class for all filters for generic accessor and derived classes.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter.AddFilterField(System.String,System.String,Gehtsoft.EF.Entities.CmpOp)">
      <summary>Add a filter field to the auto-binding chain.</summary>
      <param name="filterPropertyName">The path to the entity property to be used in filter.</param>
      <param name="associatedPropertyName">The name of property of the filter class to take the value.</param>
      <param name="operation">The comparison operation.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter.InitializeFilterData">
      <summary>Initialization of the filter auto-binding data.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter.BindToQuery(Gehtsoft.EF.Db.SqlDb.EntityQueries.ConditionEntityQueryBase)">
      <summary>Binds the filter to a conditional query.</summary>
      <param name="query" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter.BindToQueryImpl(Gehtsoft.EF.Db.SqlDb.EntityQueries.ConditionEntityQueryBase)">
      <summary>Binds the filter to a conditional query.</summary>
      <param name="query" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter.#ctor(System.Type)">
      <summary>Constructor</summary>
      <param name="t">The entity type.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2">
      <summary>The basic accessor for entities.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.#ctor(Gehtsoft.EF.Db.SqlDb.SqlDbConnection)">
      <summary>Constructor</summary>
      <param name="connection" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.IsNew(`0)">
      <summary>Checks whether an entity is a new one.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.Save(`0)">
      <summary>Creates a new or saves an existing entity into database.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.Delete(`0)">
      <summary>Deletes an entity in the database.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.DeleteMultiple(Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter)">
      <summary>Deletes multiple entities in the database.</summary>
      <param name="filter" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.UpdateMultiple(Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter,Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorUpdateRecord)">
      <summary>Updates multiple instances of entity.</summary>
      <param name="filter" />
      <param name="update" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.Get(`1)">
      <summary>Gets an entity by its ID.</summary>
      <param name="id" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.Read``1(Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter,System.Collections.Generic.IEnumerable{Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntitySortOrder},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Read multiple entities with optional filtering, sorting and paging.</summary>
      <param name="filter">The filter.</param>
      <param name="sortOrder">The sort order.</param>
      <param name="skip">The number of rows to skip from the beginning.</param>
      <param name="limit">The maximum number of rows to be returned.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.Count(Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter)">
      <summary>Gets number of entities with optional filtering.</summary>
      <param name="filter">Filter to be used. Using null to skip filtering.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.NextEntity(`0,System.Collections.Generic.IEnumerable{Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntitySortOrder},Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter,System.Boolean)">
      <summary>Gets a next (or previous) entity.</summary>
      <param name="entity">A current entity. Set null to find a first (last) record.</param>
      <param name="sortOrder">A sort order (required).</param>
      <param name="filter">A filter (optional, use null to skip filtering).</param>
      <param name="reverseDirection" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.NextKey(`0,System.Collections.Generic.IEnumerable{Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntitySortOrder},Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter,System.Boolean)">
      <summary>Gets key only of a next (or previous) entity.</summary>
      <param name="entity">A current entity. Set null to find a first (last) record.</param>
      <param name="sortOrder">A sort order (required).</param>
      <param name="filter">A filter (optional, use null to skip filtering).</param>
      <param name="reverseDirection">true to find a next record and false to find a previous record.</param>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.Connection">
      <summary>The associated DB connection.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessor`2.CanDelete(`0)">
      <summary>Returns whether the entity specified is not referenced anywhere and can be deleted.</summary>
      <param name="value" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorUpdateRecord">
      <summary>The base class for all update records for generic accessor and all derived classes.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorUpdateRecord.Reset">
      <summary>Resets values to null.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorUpdateRecord.#ctor(System.Type)">
      <summary></summary>
      <param name="t">The type of the associated entity.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorWithAggregates`2">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorWithAggregates`2.#ctor(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type)">
      <summary>Constructor.</summary>
      <param name="connection">The connection.</param>
      <param name="aggregate">The type of the entity which is contained in a T entity.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorWithAggregates`2.#ctor(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type[])">
      <summary></summary>
      <param name="connection">The type of the entity which is contained in a T entity.</param>
      <param name="aggregates">The list of types of the entity which are contained in a T entity.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorWithAggregates`2.GetAggregates``2(`0,Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter,System.Collections.Generic.IEnumerable{Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntitySortOrder},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Get the list of aggregated objects of type A</summary>
      <param name="TAC">Type of the aggregated entity collection. Must be derived from EntityCollection.</param>
      <param name="TA">Type of the aggregated entity.</param>
      <param name="filter">The filter for aggregated entity (may be null)</param>
      <param name="entity">The aggregating object.</param>
      <param name="filter">The filter for aggregated entity (may be null)</param>
      <param name="sortOrder">The sort order for aggregated entity (may be null)</param>
      <param name="skip">The number of entities to skip (may be null)</param>
      <param name="limit">The maximum number of entity to get (may be null)</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorWithAggregates`2.GetAggregatesCount`1(`0,Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter)">
      <summary>Get the count of aggregated objects of type A</summary>
      <param name="TA">Type of the aggregated entity.</param>
      <param name="entity">The aggregating object.</param>
      <param name="filter">The filter for aggregated entity (may be null)</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorWithAggregates`2.Delete(`0)">
      <summary>Deletes the entity specified and all aggregated objects.</summary>
      <param name="entity" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorWithAggregates`2.CanDelete(`0)">
      <summary>Returns whether the entity can be deleted.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorWithAggregates`2.DeleteMultiple(Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorFilter)">
      <summary>Deletes multiple entities and all their aggregated objects</summary>
      <param name="filter" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntityAccessorWithAggregates`2.SaveAggregates``1(`0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func`3,System.Char,``0,``0)">
      <summary>Saves the list of aggregates</summary>
      <param name="entity">The aggregating entity</param>
      <param name="originalAggregates">The list of original aggregates</param>
      <param name="newAggregates">The list of new aggregates</param>
      <param name="areDataEqual">The function is used to check whether two instances of the aggregated object are equal.</param>
      <param name="areIDEqual">The function is used to check whether two instances of the aggregated object have the same ID.</param>
      <param name="isDefined">The function is used to check whether the instance of the aggregated object is empty (can be useful to make aggregated object empty) instead of deleting them.</param>
      <param name="isNew">The function is used to check whether tho instance of the aggregated object is new.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntitySortOrder">
      <summary>The class defines sort order for the GenericEntityAccessor</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntitySortOrder.#ctor(System.String)">
      <summary></summary>
      <param name="path">The path to sort the result by in ascending order.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntitySortOrder.#ctor(System.String,Gehtsoft.EF.Entities.SortDir)">
      <summary></summary>
      <param name="path">The path to sort the result by.</param>
      <param name="direction">The order to sort in.</param>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntitySortOrder.Path">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.GenericEntitySortOrder.Direction">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.UpdateRecordPropertyAttribute">
      <summary>Attribute to associate update record properties to entity properties.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.UpdateRecordPropertyAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityGenericAccessor.UpdateRecordPropertyAttribute.PropertyName">
      <summary>The name of the entity property.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.AllEntities">
      <summary>The static manager for all entity descriptors in the application.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.AllEntities.Inst">
      <summary>Gets an instance of the entity manager.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.AllEntities.Item(System.Type)">
      <summary>Gets an entity descriptor by the type.</summary>
      <param name="type" />
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.AllEntities.NamingPolicy">
      <summary>Naming policy manager</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.AllEntities.NamingPolicyManager">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.AllEntities.NamingPolicyManager.Default">
      <summary>Default naming policy for all objects.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.AllEntities.NamingPolicyManager.Item(System.String)">
      <summary>Gets or sets the naming policy for a scope.</summary>
      <param name="scope">The scope name.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.ConditionEntityQueryBase">
      <summary>The base class for condition entity queries.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.ConditionEntityQueryBase.Where">
      <summary>The where condition builder.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.ConditionEntityQueryBase.GetReference(System.String)">
      <summary>Returns reference information to a field of an entity included into the query.</summary>
      <param name="path">The path to the property.</param>
      <param name="type">The entity type.</param>
      <param name="occurrence">The occurrence of the specified type in the query. Use 0 for the first occurrence, 1 for the second and so on.</param>
      <param name="property">The property name.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.CreateEntityController">
      <summary>Controller to create or drop a set of entities</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.CreateEntityController.#ctor(System.Type,System.String)">
      <summary>Constructor (by a type).</summary>
      <param name="findNearThisType">The type. Entities will be searched in the same assembly as the types specified.</param>
      <param name="scope">The scope. If the scope is null all scopes will be taken.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.CreateEntityController.#ctor(System.Reflection.Assembly,System.String)">
      <summary>Constructor (by an assembly).</summary>
      <param name="entityAssembly">The assembly in which entities will be searched.</param>
      <param name="scope">The scope. If the scope is null all scopes will be taken.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.CreateEntityController.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String)">
      <summary>Constructor (by a list of assemblies).</summary>
      <param name="assemblies">The list of assemblies to search entities.</param>
      <param name="scope">The scope. If the scope is null all scopes will be taken.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.CreateEntityController.DropTables(Gehtsoft.EF.Db.SqlDb.SqlDbConnection)">
      <summary>Drops all tables.</summary>
      <param name="connection" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.CreateEntityController.CreateTables(Gehtsoft.EF.Db.SqlDb.SqlDbConnection)">
      <summary>Creates all tables.</summary>
      <param name="connection" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.CreateEntityController.UpdateTables(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,Gehtsoft.EF.Db.SqlDb.EntityQueries.CreateEntityController.UpdateMode,System.Collections.Generic.IDictionary{System.Type,Gehtsoft.EF.Db.SqlDb.EntityQueries.CreateEntityController.UpdateMode})">
      <summary>Updates the table set.</summary>
      <param name="connection">Database connection.</param>
      <param name="defaultUpdateMode">The default update mode. The mode would be either re-create all tables or update existing tables.</param>
      <param name="individualUpdateModes">The modes for individual entities. This parameter may be useful for debugging new entities, so these new entities are recreated every
test run while all well-debugged properties are kept intact.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.CreateEntityController.UpdateMode">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.EntityQueries.CreateEntityController.UpdateMode.Recreate">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Db.SqlDb.EntityQueries.CreateEntityController.UpdateMode.Update">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.DeleteEntityQuery">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityConnectionExtension">
      <summary>Extension of the SqlDbConnection class to provide creation of entity queries and query builders.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityConnectionExtension.GetCreateEntityQuery(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type)">
      <summary>Gets the query that creates the table associated with the entity if the table does not exist.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityConnectionExtension.GetDropEntityQuery(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type)">
      <summary>Gets the query that drops the table associated with the entity.</summary>
      <param name="connection" />
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityConnectionExtension.GetInsertEntityQuery(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type)">
      <summary>Gets the query that inserts a new row into the entity tables.</summary>
      <param name="connection" />
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityConnectionExtension.GetUpdateEntityQuery(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type)">
      <summary>Gets the query that updates a row into the entity tables.</summary>
      <param name="connection" />
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityConnectionExtension.GetDeleteEntityQuery(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type)">
      <summary>Gets the query that updates a row from the entity tables.</summary>
      <param name="connection" />
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityConnectionExtension.GetGenericSelectEntityQuery(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type)">
      <summary>Gets a generic query to build a custom selection.</summary>
      <param name="connection" />
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityConnectionExtension.GetSelectEntitiesCountQuery(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type)">
      <summary>Gets a query to count the entities.</summary>
      <param name="connection" />
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityConnectionExtension.GetSelectEntitiesQuery(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type)">
      <summary>Gets the query to select a collection of entities from the database.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityConnectionExtension.GetSelectEntitiesTreeQuery(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type)">
      <summary>Gets a query that selects a tree or a subtree from a self-connected table.</summary>
      <param name="connection" />
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityConnectionExtension.GetMultiDeleteEntityQuery(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type)">
      <summary>Gets a query that deletes multiple rows.</summary>
      <param name="connection" />
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityConnectionExtension.GetMultiUpdateEntityQuery(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.Type)">
      <summary>Gets a query that updates multiple rows.</summary>
      <param name="connection" />
      <param name="type" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityDescriptor">
      <summary>Entity descriptor.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityDescriptor.#ctor">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityDescriptor.EntityType">
      <summary>The type associated with the entity.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityDescriptor.TableDescriptor">
      <summary>The table descriptor associated with the entity.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQuery">
      <summary>Base class for all entity queries.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQuery.Execute">
      <summary>Execute the query.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQuery.BindParam``1(System.String,``0)">
      <summary>Bind parameter value.</summary>
      <param name="name" />
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQuery.BindNull(System.String,System.Data.DbType)">
      <summary>Bind null to parameter.</summary>
      <param name="name" />
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQuery.Field(System.String)">
      <summary>Gets resultset column description.</summary>
      <param name="name" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQuery.GetValue``1(System.Int32)">
      <summary>Get value</summary>
      <param name="column">Column index in query resulset.</param>
      <param name="field">The column name.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQuery.IsNull(System.Int32)">
      <summary>Checks whether the value of the resultset column is null.</summary>
      <param name="column">Column index in query resulset.</param>
      <param name="field">The column name.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQuery.ReadNext()">
      <summary>Reads the next row of the resultset.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQuery.FieldCount">
      <summary>Returns the number of the columns in the query resultset.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder">
      <summary>The builder for where and having clauses of entity queries.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder.Add(Gehtsoft.EF.Entities.LogOp)">
      <summary>Adds a new condition and joins it to the prior conditions with the specified operator.</summary>
      <param name="logOp">The logical operator.</param>
      <param name="left">The raw left side of the expression.</param>
      <param name="op">The comparison operator.</param>
      <param name="right">The raw right side of the expression.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder.AddGroup(Gehtsoft.EF.Entities.LogOp)">
      <summary>Starts a new group enclosed into the brackets</summary>
      <param name="logOp">The logical operations to join the group of conditions with prior conditions.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder.ToString">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilderExtension">
      <summary>The syntax-sugar extension for EntityQueryConditionBuilder</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilderExtension.And(Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder)">
      <summary>Adds a new condition using logical AND</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilderExtension.Or(Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder)">
      <summary>Adds a new condition using logical OR</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilderExtension.Property(Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder,System.String)">
      <summary>Adds a new condition that compares a property path and joins it to prior conditions using AND</summary>
      <param name="propertyPath">The path to the property.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilderExtension.PropertyOf(Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder,System.String,System.Type,System.Int32)">
      <summary>Adds a new condition that compares a property and joins it to prior conditions using And</summary>
      <param name="property">The name of the property.</param>
      <param name="type, T">The type of the entity. If no type is specified, the first entity in the query is used.</param>
      <param name="occurrence">The occurrence of the entity inside of the query (the order in which this entity was added to the query).</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilderExtension.Exists(Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder,Gehtsoft.EF.Db.SqlDb.QueryBuilder.AQueryBuilder)">
      <summary>Adds a new EXISTS condition joins it to prior conditions using AND</summary>
      <param name="query" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilderExtension.NotExists(Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder,Gehtsoft.EF.Db.SqlDb.QueryBuilder.AQueryBuilder)">
      <summary>Adds a new NOT EXISTS condition joins it to prior conditions using AND</summary>
      <param name="builder" />
      <param name="query" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilderExtension.NotExists(Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder,Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase)">
      <summary></summary>
      <param name="builder" />
      <param name="query" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.IEntitySerializationCallback">
      <summary>Serialization callback interface for entity objects than needs encoding/decoding database data.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.IEntitySerializationCallback.BeforeSerialization(Gehtsoft.EF.Db.SqlDb.SqlDbConnection)">
      <summary>The method is called before the entity is saved to the database.</summary>
      <param name="connection" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.IEntitySerializationCallback.AfterDeserealization(Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase)">
      <summary>The method is called after the entity is read from the database.</summary>
      <param name="query" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.InsertEntityQuery">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.ModifyEntityQuery">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.ModifyEntityQuery.Execute(System.Object)">
      <summary>Modify entity using the query</summary>
      <param name="entity">The entity to be updated.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.MultiUpdateEntityQuery">
      <summary>The query is designed to set values to the properties of multiple entities at a time.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.MultiUpdateEntityQuery.AddUpdateColumn(System.String,System.Object)">
      <summary></summary>
      <param name="propertyName" />
      <param name="value" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.MultiDeleteEntityQuery">
      <summary>The class is designed to delete all entities that met the query condition.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.OnEntityCreateAttribute">
      <summary>The attribute that sets action when the entity is just created.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.OnEntityCreateAttribute.#ctor(System.Type,System.String)">
      <summary></summary>
      <param name="containerType">The type which consists of delegate.</param>
      <param name="delegateName">The name of the delegate.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.OnEntityDropAttribute">
      <summary>The attribute that sets action when entity is about to be deleted.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.OnEntityDropAttribute.#ctor(System.Type,System.String)">
      <summary></summary>
      <param name="containerType">The type which consists of delegate.</param>
      <param name="delegateName">The name of the delegate.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.OnEntityPropertyCreateAttribute">
      <summary>The attribute that sets action when property is about to be created.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.OnEntityPropertyCreateAttribute.#ctor(System.Type,System.String)">
      <summary></summary>
      <param name="containerType">The type which consists of delegate.</param>
      <param name="delegateName">The name of the delegate.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.OnEntityPropertyDropAttribute">
      <summary>The attribute that sets action when the property is about to be dropped.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.OnEntityPropertyDropAttribute.#ctor(System.Type,System.String)">
      <summary></summary>
      <param name="containerType">The type which consists of delegate.</param>
      <param name="delegateName">The name of the delegate.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesCountQuery">
      <summary>The query to count the number of the objects in the entity collection.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesCountQuery.RowCount">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQuery">
      <summary>The class to read entities from the entity collection.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQuery.ReadOne">
      <summary>Reads one entity and returns it as an object.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQuery.ReadOne``1">
      <summary>Reads one entity and returns it with the type specified.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQuery.ReadAll``2(Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQuery.OnRow{``1})">
      <summary>Reads all objects</summary>
      <param name="TC">Type of the collection. The collection should be derived from EntityCollection.</param>
      <param name="TC">The type of the entity.</param>
      <param name="onrow">An callback to be executed after the object is read from the collection.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase">
      <summary>Base class for all entity select queries.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase.Having">
      <summary>The builder for the having clause.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase.AddToResultset(System.String,System.String)">
      <summary>Add a property to resultset using property path.</summary>
      <param name="aggregation">The aggregate function to apply on the property.</param>
      <param name="property">The property path.</param>
      <param name="alias">The resultset alias.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase.AddToResultset(System.Type,System.String,System.String)">
      <summary>Add a property to resultset using type and property name.</summary>
      <param name="aggregation">The aggregate function to apply on the property.</param>
      <param name="type">The property type. The first occurrence of the type in the query will be used.</param>
      <param name="occurrence">The occurrence of the specified type in the query. Use 0 for the first occurrence, 1 for the second and so on.</param>
      <param name="property">The property name.</param>
      <param name="alias" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase.AddOrderBy(System.String,Gehtsoft.EF.Entities.SortDir)">
      <summary></summary>
      <param name="type">The type to which the property belongs to</param>
      <param name="occurrence">The occurrence of the specified type in the query. Use 0 for the first occurrence, 1 for the second and so on.</param>
      <param name="property">The property name.</param>
      <param name="propertyPath">See ConditionEntityQueryBase for more details about
property path.</param>
      <param name="direction">Sorting direction</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase.AddGroupBy(System.String)">
      <summary></summary>
      <param name="type">The type to which the property belongs to</param>
      <param name="property">The property name.</param>
      <param name="propertyPath">See ConditionEntityQueryBase for more details about
property path.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase.AddEntity(System.Type,System.String,System.Boolean)">
      <summary>Add an entity to the query.</summary>
      <param name="type">The type to be connected.</param>
      <param name="connectToProperty">The reference to the property to which this next entity should be connected to.</param>
      <param name="open">The flag indicating whether the connection should be open (outer) or inner. The side of the connection (left/right) will be
detected automatically.</param>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase.Skip">
      <summary>Sets the number of entities to skip.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase.Limit">
      <summary>Sets the maximum number of entities to be read.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase.WhereParamPrefix">
      <summary>Sets the name prefix for the automatically generated query parameters for the where clause.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase.AddWholeTree">
      <summary>Add the whole entity tree to the query without adding anything to resultset.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase.ReadOneDynamic">
      <summary>Reads the row as a dynamic object.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase.ReadAllDynamic">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntityQueryReader`1">
      <summary>A reader for SelectEntityQuery results</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntityQueryReader`1.#ctor(Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase)">
      <summary>The constructor.</summary>
      <param name="query">The query that will select the data.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntityQueryReader`1.Bind">
      <summary>Binds properties and columns by name automatically.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntityQueryReader`1.Bind(System.String,System.String)">
      <summary></summary>
      <param name="propertyName">The name of the property to bind the column to.</param>
      <param name="propertyAccessor">The LINQ expression to access the property to bind the column to.</param>
      <param name="columnName">The column name to be bound.</param>
      <param name="columnIndex">The column index to be bound.</param>
      <param name="valueAccessor">A custom function to read the value to be bound from the query.</param>
      <param name="bindingAction">An arbitrary binding action.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntityQueryReader`1.Scan(System.Func`2)">
      <summary>Scans the resultset calling specified action for each row.</summary>
      <param name="action" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntityQueryReader`1.ReadOne">
      <summary>Reads one record from the query resultset.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntityQueryReader`1.ReadAll``1">
      <summary>Reads all records from the query resultset.</summary>
      <param name="TC">The data type of the read item collections. Must be derived from IList.</param>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesTreeQuery">
      <summary>The query that reads a subtree of self-connected entities</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesTreeQuery.Root">
      <summary>The root of the subtree as object itself or object's ID</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder">
      <summary>Builds a single condition within where or having clauses of the entity conditions.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder.Raw(System.String,System.Nullable{System.Data.DbType})">
      <summary>Adds a raw part of the condition</summary>
      <param name="raw">The raw expression to be added.</param>
      <param name="columnType">The optional data type of the expression.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder.Is(Gehtsoft.EF.Entities.CmpOp)">
      <summary>Adds the comparison operation.</summary>
      <param name="op" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder.Property(System.String)">
      <summary>Adds a property by the path.</summary>
      <param name="propertyPath">The path to the property.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder.PropertyOf(System.String,System.Type,System.Int32)">
      <summary>Adds a property of an entity.</summary>
      <param name="name">The name of the property</param>
      <param name="type, T">The type of the entity. If no type is specified, the first entity in the query is used.</param>
      <param name="occurrence">The occurrence of the entity inside of the query (the order in which this entity was added to the query).</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder.Reference(Gehtsoft.EF.Db.SqlDb.EntityQueries.ConditionEntityQueryBase.InQueryName)">
      <summary>Adds a reference.</summary>
      <param name="reference">The reference to a property inside a query.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder.Parameter(System.String)">
      <summary>Adds a parameter name into the query.</summary>
      <param name="name" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder.Parameters(System.String[])">
      <summary>Adds a list of parameters into the query.</summary>
      <param name="name" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder.Query(Gehtsoft.EF.Db.SqlDb.QueryBuilder.AQueryBuilder,System.Nullable{System.Data.DbType})">
      <summary>Adds a subquery.</summary>
      <param name="builder" />
      <param name="columnType" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder.Value(System.Object,System.Nullable{System.Data.DbType})">
      <summary>Adds a value.</summary>
      <param name="value" />
      <param name="valueDbType">The DB type of the value.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder.Values(System.Object[])">
      <summary>Adds the list of the values to the expression.</summary>
      <param name="valueDbType">The DB type of the values.</param>
      <param name="values" />
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder.ParameterName">
      <summary>The property contains the name of the parameter, created for added value.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder.ParameterNames">
      <summary>The property contains the array of names of the parameters, created for added values.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension">
      <summary>The syntax-sugar extension for SingleEntityQueryConditionBuilder</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Eq(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder,System.Object)">
      <summary>Adds = operator.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Neq(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Adds  operator.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Le(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Adds &amp;lt;= operator.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Ls(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Adds &amp;lt; operator.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Ge(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Adds &gt;= operator.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Gt(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Adds &gt; operator.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Like(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Adds LIKE operator</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Exists(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Adds EXISTS operator</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.NotExists(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Adds NOT EXISTS operator</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.In(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Adds IN operator</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.NotIn(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Adds NOT IN operator</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Sum(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with SUM function (for HAVING conditions only!)</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Min(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with MIN function (for HAVING conditions only!)</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Max(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with MAX function (for HAVING conditions only!)</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Avg(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with AVG function (for HAVING conditions only!)</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Count(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Add COUNT function as argument (for HAVING conditions only!)</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.ToString(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with to string conversion.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.ToInteger(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with to integer conversion.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.ToDate(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with to date conversion.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.ToDouble(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with to double conversion.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.ToTimestamp(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with to timestamp conversion.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.ToUpper(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with to upper case conversion.</summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.ToLower(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with to lower case conversion.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Trim(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with space trim function.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilderExtension.Abs(Gehtsoft.EF.Db.SqlDb.EntityQueries.SingleEntityQueryConditionBuilder)">
      <summary>Wraps argument before with absolute value function.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.UpdateEntityQuery">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.EntityQueryLinqExtension">
      <summary>The class consists of extensions for EntityQuery to use Expression instead of property names.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.EntityQueryLinqExtension.Expression``1(Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder,System.Linq.Expressions.Expression{System.Func`2})">
      <summary>Adds an expression to the where or having clause of the entity query.</summary>
      <param name="T">The entity type.</param>
      <param name="T1">The second entity type to be involved into the expression. This options is useful when an entity is explicitly added to the
query and cannot be referenced via entity of T type.</param>
      <param name="logOp">Logical operation to be used to connect the expression to previous part of where filter.</param>
      <param name="expression">LINQ expression to be added.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.EntityQueryLinqExtension.AddToResultset``2(Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase,System.Linq.Expressions.Expression{System.Func`2},System.Boolean)">
      <summary>Adds an expression to the resultset filter of the query.</summary>
      <param name="T">The entity type.</param>
      <param name="T1">The second entity type to be involved into the expression. This options is useful when an entity is explicitly added to the
query and cannot be referenced via entity of T type.</param>
      <param name="TRes">The datatype of the value added.</param>
      <param name="query">The query.</param>
      <param name="expression" />
      <param name="alias">LINQ expression to be added.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.EntityQueryLinqExtension.AddOrderBy``1(Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase,System.Linq.Expressions.Expression{System.Func`2},System.Boolean)">
      <summary>Adds a property of the entity to the order by using the expression.</summary>
      <param name="T">The entity type.</param>
      <param name="query" />
      <param name="expression">The expression. The expression must be the simple reference to one property of the entity.</param>
      <param name="direction">Sort direction.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.EntityQueryLinqExtension.AddGroupBy``1(Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase,System.Linq.Expressions.Expression{System.Func`2})">
      <summary>Adds a property of the entity to the group by using the expression.</summary>
      <param name="T">The entity type.</param>
      <param name="T">The entity type.</param>
      <param name="query" />
      <param name="expression">The expression. The expression must be the simple reference to one property of the entity.</param>
      <param name="direction">Sort direction.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.EntityQueryLinqExtension.AddEntity``2(Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase,System.Type,Gehtsoft.EF.Entities.TableJoinType,System.Linq.Expressions.Expression{System.Func`3})">
      <summary>Adds a new entity and sets the join expression.</summary>
      <param name="query" />
      <param name="type" />
      <param name="joinType" />
      <param name="joinExpression" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.QueryableEntityProvider">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.QueryableEntityProvider.#ctor(Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.QueryableEntityProvider.IConnectionProvider)">
      <summary>Constructor</summary>
      <param name="connectionProvider">The connection provider.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.QueryableEntityProvider.Entities``1">
      <summary>Returns collection of entities.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.QueryableEntityProviderConnection">
      <summary>Connection provider for existing connection.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.QueryableEntityProviderConnection.#ctor(Gehtsoft.EF.Db.SqlDb.SqlDbConnection)">
      <summary>Constructor.</summary>
      <param name="connection" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.QueryableEntityProviderConnectionFactory">
      <summary>Connection provider trough connection factory.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.QueryableEntityProviderConnectionFactory.#ctor(Gehtsoft.EF.Db.SqlDb.SqlDbConnectionFactory,System.String)">
      <summary>Constructor</summary>
      <param name="factory">A delegate to connection factory method.
The delegate signature is SqlDbConnection SqlDbConnectionFactory(string connectionString).</param>
      <param name="connectionString" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.QueryableEntity`1">
      <summary>The class provides access to entities on the server using LINQ queries.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.QueryableEntity`1.Insert(`0)">
      <summary>Saves the entity to the server.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.QueryableEntity`1.Update(`0)">
      <summary>Updates the entity on the server.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.QueryableEntity`1.Delete(`0)">
      <summary>Deletes the entity on the server.</summary>
      <param name="value" />
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction">
      <summary>The functions which can be used on entity properties in LINQ expressions and queries.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.ToString(System.Object)">
      <summary>Converts the value into string.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.ToDate(System.Object)">
      <summary>Converts the value into date.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.ToTimestamp(System.Object)">
      <summary>Converts the value into timestamp.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.ToInteger(System.Object)">
      <summary>Converts the value into integer.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.ToDouble(System.Object)">
      <summary>Converts the value into double.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Like(System.Object,System.String)">
      <summary>Matches whether value specified matches the like mask.</summary>
      <param name="value">The value to match.</param>
      <param name="mask">The like mask. %, _, ? and * patterns are support.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Sum``1(``0)">
      <summary>Calculates sum of the value specified.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Avg``1(``0)">
      <summary>Calculates average of the value specified.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Min``1(``0)">
      <summary>Calculates minimum of the value specified.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Max``1(``0)">
      <summary>Calculates maximum of the value specified.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Count">
      <summary>Counts number of the records.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Abs(System.Int32)">
      <summary>Returns the absolute value of the argument.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Trim(System.String)">
      <summary>Trims spaces from both sides of the text.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.TrimLeft(System.String)">
      <summary>Trims spaces from the left side of the text.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.TrimRight(System.String)">
      <summary>Trims spaces from the right side of the text.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Upper(System.String)">
      <summary>Converts the text into upper case.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Concat(System.String)">
      <summary>Concatenates strings</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Lower(System.String)">
      <summary>Converts the text into lower case.</summary>
      <param name="value" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.In(System.Object,Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase)">
      <summary>Returns true if the value specifies is inside the query results.</summary>
      <param name="value" />
      <param name="query" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.NotIn(System.Object,Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase)">
      <summary>Returns true if the value specifies is not inside the query results.</summary>
      <param name="value" />
      <param name="query" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Exists(Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase)">
      <summary>Returns true if the query has non empty results.</summary>
      <param name="query" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.NotExists(Gehtsoft.EF.Db.SqlDb.EntityQueries.SelectEntitiesQueryBase)">
      <summary>Returns true if the query has empty result.</summary>
      <param name="query" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.EntityQueries.Linq.SqlFunction.Value``1(Gehtsoft.EF.Db.SqlDb.EntityQueries.ConditionEntityQueryBase.InQueryName)">
      <summary>The function allow use of subquery property reference in LINQ expressions.</summary>
      <param name="inQueryName">The in-query value reference obtained using GetReference method.</param>
    </member>
    <member name="T:Gehtsoft.EF.Bson.BsonEntityCatalog">
      <summary>The catalog of all entity descriptions for BSON conversion purpose</summary>
    </member>
    <member name="M:Gehtsoft.EF.Bson.BsonEntityCatalog.FindType(System.Type)">
      <summary>Finds the type description by the type.</summary>
      <param name="type" />
    </member>
    <member name="M:Gehtsoft.EF.Bson.BsonEntityCatalog.FindType(System.String)">
      <summary>Finds the type description by the type name.</summary>
      <param name="name">The name of the type (as in Type.Name)</param>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityCatalog.Instance">
      <summary>Returns an instance of the catalog.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Bson.BsonEntityDescription">
      <summary>Description of the entity for BSON conversion purpose</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityDescription.EntityType">
      <summary>The type of the entity.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityDescription.Table">
      <summary>The table name of the entity.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityDescription.Fields">
      <summary>The list of fields of the entity</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityDescription.PrimaryKey">
      <summary>The field which is primary key of the entity.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Bson.BsonEntityField">
      <summary>The description of an entity field.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.PropertyName">
      <summary>The name of the property of the type.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.FieldName">
      <summary>The name of the field</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.PropertyInfo">
      <summary>The property info structure.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.PropertyType">
      <summary>The datatype of the property.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.PropertyBaseType">
      <summary>The simple type of the property (e.g. a type of array element if the property is an array).</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.ProperyBaseBsonType">
      <summary>Bson type associated to the property base type.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.ProperyBsonType">
      <summary>Bson type associated to the property type.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.IsArray">
      <summary>The flag indicating whether the property is an array.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.IsNullable">
      <summary>The flag indicating whether the property is nullable.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.IsSorted">
      <summary>The flag indicating whether the table is sorted by this field.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.IsAutoId">
      <summary>The flag indicating whether the property is automatic ID</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.IsPrimaryKey">
      <summary>The flag indicating whether the property is a primary key.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.IsReference">
      <summary>The flag indicating whether the property is a foreign key reference.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonEntityField.ReferencedEntity">
      <summary>The description of the referenced entity.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Bson.BsonException">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonException.Code">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Bson.BsonException.Message">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Bson.BsonExceptionCode">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Bson.BsonExceptionCode.TypeIsNotEntity">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Bson.BsonExceptionCode.TypeIsNotSupported">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Bson.BsonExceptionCode.NoPk">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Bson.EntityToBsonController">
      <summary>The controller the converts an entity into a BSON document and BSON document to an entity.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Bson.EntityToBsonController.ToDocument(System.Object)">
      <summary>Converts an entity of BSON document.</summary>
      <param name="entity" />
    </member>
    <member name="M:Gehtsoft.EF.Bson.EntityToBsonController.ToEntity(MongoDB.Bson.BsonDocument,System.Type)">
      <summary>Converts BSON document to an entity.</summary>
      <param name="document">The document to be converted.</param>
      <param name="type">The type of the entity.</param>
      <param name="T">The type of the entity.</param>
    </member>
    <member name="M:Gehtsoft.EF.Bson.EntityToBsonController.ToEntities``1(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonDocument})">
      <summary>Converts an array of BSON documents to an entity collection.</summary>
      <param name="documents" />
      <param name="T">The type of the entity.</param>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.EfMongoDbException">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.MongoDb.EfMongoDbException.Code">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.MongoDb.EfMongoDbException.Message">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.EfMongoDbExceptionCode">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.MongoDb.EfMongoDbExceptionCode.LogOpNotSupported">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.MongoDb.EfMongoDbExceptionCode.CmpOpNotSupported">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.MongoDb.EfMongoDbExceptionCode.PropertyNotFound">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.MongoDb.EfMongoDbExceptionCode.NotAnEntity">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.MongoDb.EfMongoDbExceptionCode.LogOpNotSame">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.MongoDb.EfMongoDbExceptionCode.FilterGroupIsEmpty">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.MongoDb.EfMongoDbExceptionCode.FilterIsIncomplete">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoConnection">
      <summary>Connection to the MongoDB</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetSchema">
      <summary>Get list of tables in the connection.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.Dispose">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetCreateListQuery``1">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetCreateListQuery(System.Type)">
      <summary></summary>
      <param name="t" />
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetDeleteListQuery``1">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetDeleteListQuery(System.Type)">
      <summary></summary>
      <param name="t" />
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetInsertEntityQuery``1">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetInsertEntityQuery(System.Type)">
      <summary></summary>
      <param name="t" />
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetUpdateEntityQuery``1">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetUpdateEntityQuery(System.Type)">
      <summary></summary>
      <param name="t" />
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetUpdateMultiEntityQuery``1">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetUpdateMultiEntityQuery(System.Type)">
      <summary></summary>
      <param name="t" />
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetDeleteEntityQuery``1">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetDeleteEntityQuery(System.Type)">
      <summary></summary>
      <param name="t" />
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetDeleteMultiEntityQuery``1">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetDeleteMultiEntityQuery(System.Type)">
      <summary></summary>
      <param name="t" />
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetSelectQuery``1(System.Boolean)">
      <summary></summary>
      <param name="expandReference" />
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetSelectQuery(System.Type,System.Boolean)">
      <summary></summary>
      <param name="t" />
      <param name="expandReference" />
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetCountQuery``1">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnection.GetCountQuery(System.Type)">
      <summary></summary>
      <param name="t" />
    </member>
    <member name="P:Gehtsoft.EF.MongoDb.MongoConnection.Database">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoConnectionFactory">
      <summary>Factory of MongoDB Connection</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoConnectionFactory.Create(System.String)">
      <summary></summary>
      <param name="connectionString">MongoDB connection string.</param>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoCountQuery">
      <summary>The query to get a count of the objects in the collection</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoCountQuery.Execute">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.MongoDb.MongoCountQuery.RowCount">
      <summary>Returns the number of the rows.</summary>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoCreateListQuery">
      <summary>The query that creates a list (MongoDb table) for the entity specified.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoCreateListQuery.Execute">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoDeleteEntityQuery">
      <summary>The query that deletes an entity specified from the list.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoDeleteEntityQuery.Execute(System.Object)">
      <summary></summary>
      <param name="entity" />
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoDeleteListQuery">
      <summary>The query that deletes a list (MongoDB table) associated with the entity type.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoDeleteListQuery.Execute">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoDeleteMultiEntityQuery">
      <summary>The query that deletes one or more entities by the condition specified.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoDeleteMultiEntityQuery.Execute">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoIndexAttribute">
      <summary>The entity attribute to create the index on field of included property field.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoIndexAttribute.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoIndexAttribute.#ctor(System.String)">
      <summary>Parameterized constructor.</summary>
      <param name="key">The index key (the path expression).</param>
    </member>
    <member name="P:Gehtsoft.EF.MongoDb.MongoIndexAttribute.Key">
      <summary>The index key (the path expression).</summary>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoInsertEntityQuery">
      <summary>The query to insert an entity into the list.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoInsertEntityQuery.Execute(System.Object)">
      <summary></summary>
      <param name="entity" />
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoQuery">
      <summary>The base class for all MongoDB queries.</summary>
    </member>
    <member name="P:Gehtsoft.EF.MongoDb.MongoQuery.Collection">
      <summary>MongoDB collection associated with the query entity.</summary>
    </member>
    <member name="P:Gehtsoft.EF.MongoDb.MongoQuery.Connection">
      <summary>The MongoDB connection associated with the query.</summary>
    </member>
    <member name="P:Gehtsoft.EF.MongoDb.MongoQuery.EntityType">
      <summary>Datatype of the entity associated with the query.</summary>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoQueryWithCondition">
      <summary>The base class for all MongoDB query that has a condition.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoQueryWithCondition.AddWhereFilter(Gehtsoft.EF.Entities.LogOp,System.String,Gehtsoft.EF.Entities.CmpOp,System.Object)">
      <summary></summary>
      <param name="logOp" />
      <param name="path" />
      <param name="cmpOp" />
      <param name="value" />
      <param name="values" />
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoQueryWithCondition.AddWhereGroup(Gehtsoft.EF.Entities.LogOp)">
      <summary>Add a where logical group.</summary>
      <param name="logOp" />
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoSelectQuery">
      <summary>The query that selects entities from the list (without lookup into references).</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoSelectQuery.AddToResultset(System.String)">
      <summary>Add a field into resultset.</summary>
      <param name="path">The path to the field to be added.</param>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoSelectQuery.ExcludeFromResultset(System.String)">
      <summary>Remove a field from from the resultset.</summary>
      <param name="path">The path the field to be excluded.</param>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoSelectQuery.AddOrderBy(System.String,Gehtsoft.EF.Entities.SortDir)">
      <summary>Add path to sort the value by.</summary>
      <param name="property" />
      <param name="direction" />
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoSelectQuery.Execute">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoSelectQuery.ReadAll``1">
      <summary>Reads all entities.</summary>
      <param name="T">Entity type.</param>
    </member>
    <member name="P:Gehtsoft.EF.MongoDb.MongoSelectQuery.Skip">
      <summary>Sets number of records to be skipped at the beginning of the result.</summary>
    </member>
    <member name="P:Gehtsoft.EF.MongoDb.MongoSelectQuery.Limit">
      <summary>Sets the maximum number of records to be returned.</summary>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoSelectQueryBase">
      <summary>The base class for entity select queries.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoSelectQueryBase.ReadNext">
      <summary>Reads next row from the result set.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoSelectQueryBase.ReadOne``1">
      <summary>Reads one instance of the entity associated with the query.</summary>
      <param name="T">The type of the entity</param>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoSelectQueryBase.GetEntity``1">
      <summary>Reads entity from the current row</summary>
      <param name="T, type">Type of the entity.</param>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoSelectQueryBase.GetDocument">
      <summary>Get the current row as a Bson document.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoSelectQueryBase.GetValue(System.Int32,System.Type)">
      <summary>Gets field's value.</summary>
      <param name="columnIndex">The column index. Please note that if the resultset is filtered, the column order (unlike to SQL queries) remains the same
as fields are located in the property, not the order in which the fields are included into the resultset.</param>
      <param name="columnName">The name of the column (cannot be a name of the associated property of the entity).</param>
      <param name="T, type">The data type of the value to be returned.</param>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoSelectQueryBase.IsNull(System.Int32)">
      <summary></summary>
      <param name="columnIndex">The column index. Please note that if the resultset is filtered, the column order (unlike to SQL queries) remains the same
as fields are located in the property, not the order in which the fields are included into the resultset.</param>
      <param name="columnName">The name of the column (cannot be a name of the associated property of the entity).</param>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoSelectQueryBase.FieldName(System.Int32)">
      <summary>Returns the name of the field.</summary>
      <param name="columnIndex">The column index. Please note that if the resultset is filtered, the column order (unlike to SQL queries) remains the same
as fields are located in the property, not the order in which the fields are included into the resultset.</param>
    </member>
    <member name="P:Gehtsoft.EF.MongoDb.MongoSelectQueryBase.ResultSet">
      <summary>The query resultset as a collection of Bson documents.</summary>
    </member>
    <member name="P:Gehtsoft.EF.MongoDb.MongoSelectQueryBase.FieldCount">
      <summary>Number of fields in the resultset.</summary>
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoUpdateEntityQuery">
      <summary>The query that updates an entity.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoUpdateEntityQuery.Execute(System.Object)">
      <summary></summary>
      <param name="entity" />
    </member>
    <member name="T:Gehtsoft.EF.MongoDb.MongoUpdateMultiEntityQuery">
      <summary>The query that updates multiple entities by the condition.</summary>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoUpdateMultiEntityQuery.Set(System.String,System.Object)">
      <summary>Add a set value</summary>
      <param name="path">The path to the property to be updated.</param>
      <param name="value">The value to be set.</param>
    </member>
    <member name="M:Gehtsoft.EF.MongoDb.MongoUpdateMultiEntityQuery.Execute">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.FTS.FtsConnection">
      <summary>FTS extension for database connection class.</summary>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsConnection.FtsCreateTables(Gehtsoft.EF.Db.SqlDb.SqlDbConnection)">
      <summary>Creates FTS tables.</summary>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsConnection.FtsDropTables(Gehtsoft.EF.Db.SqlDb.SqlDbConnection)">
      <summary>Drops FTS tables.</summary>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsConnection.DoesFtsTableExist(Gehtsoft.EF.Db.SqlDb.SqlDbConnection)">
      <summary>Checks whether FTS tables exists.</summary>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsConnection.FtsSetObjectText(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.String,System.String,System.String)">
      <summary>Sets text of the object.</summary>
      <param name="type">The object type id (if the system has multiple types of the objects and wants to distinguish them).</param>
      <param name="objectID">The object identifier (must be unique within the type).</param>
      <param name="sorter">The value to be used to sort objects in the results. If no value provided, the object id is used to sort.</param>
      <param name="text">The text to be set. The text will be parsed into separate words. Punctuation and numbers will be ignored.</param>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsConnection.FtsDeleteObject(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.String,System.String)">
      <summary>Deletes a FTS object.</summary>
      <param name="type">The object type id.</param>
      <param name="objectID">The object id.</param>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsConnection.FtsCleanupWords(Gehtsoft.EF.Db.SqlDb.SqlDbConnection)">
      <summary>Deletes words that aren't associated with any object.</summary>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsConnection.FtsCountObjects(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.String,System.Boolean,System.String[])">
      <summary>Returns the number of the objects.</summary>
      <param name="text">The words to be searched.</param>
      <param name="allWords">The flag indicating whether all (true) or any (false) words needs to be found.</param>
      <param name="types">The list of the object types.</param>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsConnection.FtsGetObjects(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.String,System.Boolean,System.String[],System.Int32,System.Int32)">
      <summary></summary>
      <param name="text">The words to be searched.</param>
      <param name="allWords">The flag indicating whether all (true) or any (false) words needs to be found.</param>
      <param name="types">The list of the object types.</param>
      <param name="limit" />
      <param name="skip" />
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsConnection.FtsGetWords(Gehtsoft.EF.Db.SqlDb.SqlDbConnection,System.String,System.Int32,System.Int32)">
      <summary>Get words in the word list</summary>
      <param name="mask" />
      <param name="limit" />
      <param name="skip" />
    </member>
    <member name="T:Gehtsoft.EF.FTS.FtsObjectEntity">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsObjectEntity.#ctor">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.FTS.FtsObjectEntity.ID">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.FTS.FtsObjectEntity.ObjectType">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.FTS.FtsObjectEntity.ObjectID">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.FTS.FtsObjectEntity.Sorter">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.FTS.FtsObjectEntityCollection">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsObjectEntityCollection.#ctor">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.FTS.FtsQueryExtension">
      <summary>FTS query extensions</summary>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsQueryExtension.AddFtsSearch(Gehtsoft.EF.Db.SqlDb.EntityQueries.EntityQueryConditionBuilder,System.String,System.Boolean,System.String,System.Nullable{System.Int32})">
      <summary>Adds a FTS condition to the main entity of a select entity query.</summary>
      <param name="text">The words to be searched.</param>
      <param name="allWords">The flag indicating whether all (true) or any (false) words needs to be found.</param>
      <param name="ftsType">The type of the FTS object.</param>
      <param name="limit">The maximum number of matches.</param>
    </member>
    <member name="T:Gehtsoft.EF.FTS.FtsWord2ObjectEntity">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsWord2ObjectEntity.#ctor">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.FTS.FtsWord2ObjectEntity.ID">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.FTS.FtsWord2ObjectEntity.Word">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.FTS.FtsWord2ObjectEntity.Object">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.FTS.FtsWordEntity">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsWordEntity.#ctor">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.FTS.FtsWordEntity.ID">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.FTS.FtsWordEntity.Word">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.FTS.FtsWordEntityCollection">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.EF.FTS.FtsWordEntityCollection.#ctor">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.OData.EdmModelBuilder">
      <summary>The model builder for OData ER model.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.EdmModelBuilder.EntityTypeByName(System.String)">
      <summary>Returns the entity specification by its OData name.</summary>
      <param name="odataEntityName">The odata entity name.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.EdmModelBuilder.Build(Gehtsoft.EF.Entities.EntityFinder.EntityTypeInfo[],System.String)">
      <summary>Builds a ER model using the list of the entities and the namespace name</summary>
      <param name="entities">The list of the entities</param>
      <param name="ns">The OData namespace name.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.EdmModelBuilder.#ctor">
      <summary>Constructor</summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.OData.EdmModelBuilder.Model">
      <summary>The model</summary>
    </member>
    <member name="T:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor">
      <summary>The OData query processor</summary>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.#ctor(Gehtsoft.EF.Db.SqlDb.ISqlDbConnectionFactory,Gehtsoft.EF.Db.SqlDb.OData.EdmModelBuilder,System.String)">
      <summary>Constructor</summary>
      <param name="connectionFactory">SQL.Db connection factory.</param>
      <param name="edmModelBuilder">The ER model</param>
      <param name="root">The root part of URIs (typically with the protocol and web site name, but may also contains the area name.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.SelectDataAsync(System.Void,System.Object)">
      <summary>Selects the data asynchronously</summary>
      <param name="uri">The URI</param>
      <param name="token">The cancellation token</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.SelectData(System.Uri)">
      <summary></summary>
      <param name="uri">The URI</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.GetFormattedDataAsync(System.Void,System.String)">
      <summary>Selects formatted data asynchronously</summary>
      <param name="uri">The URI</param>
      <param name="token">The cancellation token</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.GetFormattedData(System.Uri)">
      <summary></summary>
      <param name="uri">The URI</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.RemoveRecordAsync(System.Void,System.String,System.String)">
      <summary>Removes the record asynchronously</summary>
      <param name="tableName">The name of the entity</param>
      <param name="id">The entity identifier</param>
      <param name="token">Cancellation token</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.RemoveRecord(System.String,System.Int32)">
      <summary>Removes the record</summary>
      <param name="tableName">The name of the entity</param>
      <param name="id">The entity identifier</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.AddNewRecordAsync(System.Void,System.Tuple`2,System.Boolean)">
      <summary>Adds a new record</summary>
      <param name="tableName">The name of the table</param>
      <param name="serializedBody">The body of the entity serialized as Json object.</param>
      <param name="token" />
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.AddNewRecord(System.String,System.String,System.Boolean@)">
      <summary></summary>
      <param name="tableName">The name of the table.</param>
      <param name="serializedBody">The body of the record serialized into Json</param>
      <param name="wasError">The output flag indicating whether a error occurred.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.UpdateRecordAsync(System.Void,System.Tuple`2,System.Boolean,System.String)">
      <summary>The method updates the record asynchronously</summary>
      <param name="tableName">The name of the table</param>
      <param name="serializedBody">The method name serialized into json</param>
      <param name="id">The object identifier.</param>
      <param name="token">Cancellation token.</param>
    </member>
    <member name="M:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.UpdateRecord(System.String,System.String,System.Int32,System.Boolean@)">
      <summary></summary>
      <param name="tableName">The name of the table</param>
      <param name="serializedBody">The object to be updated serialized as json.</param>
      <param name="id">The object identifier.</param>
      <param name="wasError">The flag indicating whether there was a error during the operation.</param>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.ODataCountName">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.EF.Db.SqlDb.OData.ODataProcessor.ODataMetadataName">
      <summary></summary>
    </member>
  </members>
</doc>