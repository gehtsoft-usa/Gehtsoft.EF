/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.5.0.0
 */
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Hime.Redist;
using Hime.Redist.Parsers;

namespace Gehtsoft.EF.Db.SqlDb.Sql
{
	/// <summary>
	/// Represents a parser
	/// </summary>
	[GeneratedCodeAttribute("Hime.SDK", "3.5.0.0")]
	public class SqlParser : RNGLRParser
	{
		/// <summary>
		/// The automaton for this parser
		/// </summary>
		private static readonly RNGLRAutomaton commonAutomaton = RNGLRAutomaton.Find(typeof(SqlParser), "SqlParser.bin");
		/// <summary>
		/// Contains the constant IDs for the variables and virtuals in this parser
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.0.0")]
		public class ID
		{
			/// <summary>
			/// The unique identifier for variable NULL
			/// </summary>
			public const int VariableNull = 0x000C;
			/// <summary>
			/// The unique identifier for variable BOOLEAN_TRUE
			/// </summary>
			public const int VariableBooleanTrue = 0x000D;
			/// <summary>
			/// The unique identifier for variable BOOLEAN_FALSE
			/// </summary>
			public const int VariableBooleanFalse = 0x000E;
			/// <summary>
			/// The unique identifier for variable BOOLEAN_CONST
			/// </summary>
			public const int VariableBooleanConst = 0x000F;
			/// <summary>
			/// The unique identifier for variable STRING_CONST
			/// </summary>
			public const int VariableStringConst = 0x0010;
			/// <summary>
			/// The unique identifier for variable NUMBER_CONST
			/// </summary>
			public const int VariableNumberConst = 0x0011;
			/// <summary>
			/// The unique identifier for variable DATE_CONST
			/// </summary>
			public const int VariableDateConst = 0x0012;
			/// <summary>
			/// The unique identifier for variable DATETIME_CONST
			/// </summary>
			public const int VariableDatetimeConst = 0x0013;
			/// <summary>
			/// The unique identifier for variable CONSTANT
			/// </summary>
			public const int VariableConstant = 0x0014;
			/// <summary>
			/// The unique identifier for variable EOS
			/// </summary>
			public const int VariableEos = 0x0015;
			/// <summary>
			/// The unique identifier for variable NOP
			/// </summary>
			public const int VariableNop = 0x0016;
			/// <summary>
			/// The unique identifier for variable MINUS_OP
			/// </summary>
			public const int VariableMinusOp = 0x0017;
			/// <summary>
			/// The unique identifier for variable PLUS_OP
			/// </summary>
			public const int VariablePlusOp = 0x0018;
			/// <summary>
			/// The unique identifier for variable MUL_OP
			/// </summary>
			public const int VariableMulOp = 0x0019;
			/// <summary>
			/// The unique identifier for variable DIV_OP
			/// </summary>
			public const int VariableDivOp = 0x001A;
			/// <summary>
			/// The unique identifier for variable CONCAT_OP
			/// </summary>
			public const int VariableConcatOp = 0x001B;
			/// <summary>
			/// The unique identifier for variable EQ_OP
			/// </summary>
			public const int VariableEqOp = 0x001C;
			/// <summary>
			/// The unique identifier for variable NEQ_OP
			/// </summary>
			public const int VariableNeqOp = 0x001D;
			/// <summary>
			/// The unique identifier for variable GT_OP
			/// </summary>
			public const int VariableGtOp = 0x001E;
			/// <summary>
			/// The unique identifier for variable GE_OP
			/// </summary>
			public const int VariableGeOp = 0x001F;
			/// <summary>
			/// The unique identifier for variable LT_OP
			/// </summary>
			public const int VariableLtOp = 0x0020;
			/// <summary>
			/// The unique identifier for variable LE_OP
			/// </summary>
			public const int VariableLeOp = 0x0021;
			/// <summary>
			/// The unique identifier for variable EXACT_LIKE_OP
			/// </summary>
			public const int VariableExactLikeOp = 0x0022;
			/// <summary>
			/// The unique identifier for variable NOT_LIKE_OP
			/// </summary>
			public const int VariableNotLikeOp = 0x0023;
			/// <summary>
			/// The unique identifier for variable LIKE_OP
			/// </summary>
			public const int VariableLikeOp = 0x0024;
			/// <summary>
			/// The unique identifier for variable EXACT_IN_OP
			/// </summary>
			public const int VariableExactInOp = 0x0025;
			/// <summary>
			/// The unique identifier for variable NOT_IN_OP
			/// </summary>
			public const int VariableNotInOp = 0x0026;
			/// <summary>
			/// The unique identifier for variable IN_OP
			/// </summary>
			public const int VariableInOp = 0x0027;
			/// <summary>
			/// The unique identifier for variable EXACT_NULL_OP
			/// </summary>
			public const int VariableExactNullOp = 0x0028;
			/// <summary>
			/// The unique identifier for variable NOT_NULL_OP
			/// </summary>
			public const int VariableNotNullOp = 0x0029;
			/// <summary>
			/// The unique identifier for variable NULL_OP
			/// </summary>
			public const int VariableNullOp = 0x002A;
			/// <summary>
			/// The unique identifier for variable CALL_ARGS
			/// </summary>
			public const int VariableCallArgs = 0x002B;
			/// <summary>
			/// The unique identifier for variable CALL_BRACKET
			/// </summary>
			public const int VariableCallBracket = 0x002C;
			/// <summary>
			/// The unique identifier for variable MATH_FUNC_NAME
			/// </summary>
			public const int VariableMathFuncName = 0x002D;
			/// <summary>
			/// The unique identifier for variable MATH_FUNC_CALL
			/// </summary>
			public const int VariableMathFuncCall = 0x002E;
			/// <summary>
			/// The unique identifier for variable CAST_FUNC_NAME
			/// </summary>
			public const int VariableCastFuncName = 0x002F;
			/// <summary>
			/// The unique identifier for variable CAST_FUNC_CALL
			/// </summary>
			public const int VariableCastFuncCall = 0x0030;
			/// <summary>
			/// The unique identifier for variable STR_FUNC_NAME
			/// </summary>
			public const int VariableStrFuncName = 0x0031;
			/// <summary>
			/// The unique identifier for variable STR_FUNC_CALL
			/// </summary>
			public const int VariableStrFuncCall = 0x0032;
			/// <summary>
			/// The unique identifier for variable BOOL_STR_FUNC_NAME
			/// </summary>
			public const int VariableBoolStrFuncName = 0x0033;
			/// <summary>
			/// The unique identifier for variable BOOL_STR_FUNC_CALL
			/// </summary>
			public const int VariableBoolStrFuncCall = 0x0034;
			/// <summary>
			/// The unique identifier for variable TRIM_LEADING
			/// </summary>
			public const int VariableTrimLeading = 0x0035;
			/// <summary>
			/// The unique identifier for variable TRIM_TRAILING
			/// </summary>
			public const int VariableTrimTrailing = 0x0036;
			/// <summary>
			/// The unique identifier for variable TRIM_BOTH
			/// </summary>
			public const int VariableTrimBoth = 0x0037;
			/// <summary>
			/// The unique identifier for variable TRIM_SPECIFICATION
			/// </summary>
			public const int VariableTrimSpecification = 0x0038;
			/// <summary>
			/// The unique identifier for variable TRIM_CALL
			/// </summary>
			public const int VariableTrimCall = 0x0039;
			/// <summary>
			/// The unique identifier for variable FUNC_CALL
			/// </summary>
			public const int VariableFuncCall = 0x003A;
			/// <summary>
			/// The unique identifier for variable BRACKET_EXPR
			/// </summary>
			public const int VariableBracketExpr = 0x003B;
			/// <summary>
			/// The unique identifier for variable SELECT_EXPR
			/// </summary>
			public const int VariableSelectExpr = 0x003C;
			/// <summary>
			/// The unique identifier for variable SIMPLE_EXPR
			/// </summary>
			public const int VariableSimpleExpr = 0x003D;
			/// <summary>
			/// The unique identifier for variable UNARY_EXPR
			/// </summary>
			public const int VariableUnaryExpr = 0x003E;
			/// <summary>
			/// The unique identifier for variable MUL_EXPR
			/// </summary>
			public const int VariableMulExpr = 0x003F;
			/// <summary>
			/// The unique identifier for variable ADD_EXPR
			/// </summary>
			public const int VariableAddExpr = 0x0040;
			/// <summary>
			/// The unique identifier for variable CONCAT_EXPR
			/// </summary>
			public const int VariableConcatExpr = 0x0041;
			/// <summary>
			/// The unique identifier for variable COM_EXPR
			/// </summary>
			public const int VariableComExpr = 0x0042;
			/// <summary>
			/// The unique identifier for variable REL_EXPR
			/// </summary>
			public const int VariableRelExpr = 0x0043;
			/// <summary>
			/// The unique identifier for variable LIKE_EXPR
			/// </summary>
			public const int VariableLikeExpr = 0x0044;
			/// <summary>
			/// The unique identifier for variable IN_PREDICATE
			/// </summary>
			public const int VariableInPredicate = 0x0045;
			/// <summary>
			/// The unique identifier for variable IN_PREDICATE_VALUE
			/// </summary>
			public const int VariableInPredicateValue = 0x0046;
			/// <summary>
			/// The unique identifier for variable IN_VALUE_ARGS
			/// </summary>
			public const int VariableInValueArgs = 0x0047;
			/// <summary>
			/// The unique identifier for variable IN_VALUE_LIST
			/// </summary>
			public const int VariableInValueList = 0x0048;
			/// <summary>
			/// The unique identifier for variable NULL_PREDICATE
			/// </summary>
			public const int VariableNullPredicate = 0x0049;
			/// <summary>
			/// The unique identifier for variable COMPARE_EXPR
			/// </summary>
			public const int VariableCompareExpr = 0x004A;
			/// <summary>
			/// The unique identifier for variable NOT_OP
			/// </summary>
			public const int VariableNotOp = 0x004B;
			/// <summary>
			/// The unique identifier for variable AND_OP
			/// </summary>
			public const int VariableAndOp = 0x004C;
			/// <summary>
			/// The unique identifier for variable OR_OP
			/// </summary>
			public const int VariableOrOp = 0x004D;
			/// <summary>
			/// The unique identifier for variable UX_BOOL_EXPR
			/// </summary>
			public const int VariableUxBoolExpr = 0x004E;
			/// <summary>
			/// The unique identifier for variable AND_BOOL_EXPR
			/// </summary>
			public const int VariableAndBoolExpr = 0x004F;
			/// <summary>
			/// The unique identifier for variable OR_BOOL_EXPR
			/// </summary>
			public const int VariableOrBoolExpr = 0x0050;
			/// <summary>
			/// The unique identifier for variable EXPR
			/// </summary>
			public const int VariableExpr = 0x0051;
			/// <summary>
			/// The unique identifier for variable BOOL_EXPR
			/// </summary>
			public const int VariableBoolExpr = 0x0052;
			/// <summary>
			/// The unique identifier for variable SET_QUANTIFIER
			/// </summary>
			public const int VariableSetQuantifier = 0x0053;
			/// <summary>
			/// The unique identifier for variable ASRERISK
			/// </summary>
			public const int VariableAsrerisk = 0x0054;
			/// <summary>
			/// The unique identifier for variable AGGR_CALL_BRACKET
			/// </summary>
			public const int VariableAggrCallBracket = 0x0055;
			/// <summary>
			/// The unique identifier for variable AGGR_FUNC
			/// </summary>
			public const int VariableAggrFunc = 0x0056;
			/// <summary>
			/// The unique identifier for variable AGGR_COUNT_ALL
			/// </summary>
			public const int VariableAggrCountAll = 0x0057;
			/// <summary>
			/// The unique identifier for variable AGGR_CALL
			/// </summary>
			public const int VariableAggrCall = 0x0058;
			/// <summary>
			/// The unique identifier for variable SELECT_SUBLIST
			/// </summary>
			public const int VariableSelectSublist = 0x0059;
			/// <summary>
			/// The unique identifier for variable EXPR_ALIAS
			/// </summary>
			public const int VariableExprAlias = 0x005A;
			/// <summary>
			/// The unique identifier for variable FIELD
			/// </summary>
			public const int VariableField = 0x005B;
			/// <summary>
			/// The unique identifier for variable SELECT_LIST
			/// </summary>
			public const int VariableSelectList = 0x005C;
			/// <summary>
			/// The unique identifier for variable TABLE_EXPRESSION
			/// </summary>
			public const int VariableTableExpression = 0x005D;
			/// <summary>
			/// The unique identifier for variable WHERE_CLAUSE
			/// </summary>
			public const int VariableWhereClause = 0x005E;
			/// <summary>
			/// The unique identifier for variable FROM_CLAUSE
			/// </summary>
			public const int VariableFromClause = 0x005F;
			/// <summary>
			/// The unique identifier for variable TABLE_REFERENCE_LIST
			/// </summary>
			public const int VariableTableReferenceList = 0x0060;
			/// <summary>
			/// The unique identifier for variable TABLE_REFERENCE
			/// </summary>
			public const int VariableTableReference = 0x0061;
			/// <summary>
			/// The unique identifier for variable TABLE_PRIMARY
			/// </summary>
			public const int VariableTablePrimary = 0x0062;
			/// <summary>
			/// The unique identifier for variable JOINED_TABLE
			/// </summary>
			public const int VariableJoinedTable = 0x0063;
			/// <summary>
			/// The unique identifier for variable AUTO_JOIN
			/// </summary>
			public const int VariableAutoJoin = 0x0064;
			/// <summary>
			/// The unique identifier for variable QUALIFIED_JOIN
			/// </summary>
			public const int VariableQualifiedJoin = 0x0065;
			/// <summary>
			/// The unique identifier for variable JOIN_TYPE
			/// </summary>
			public const int VariableJoinType = 0x0066;
			/// <summary>
			/// The unique identifier for variable OUTER_JOIN_TYPE
			/// </summary>
			public const int VariableOuterJoinType = 0x0067;
			/// <summary>
			/// The unique identifier for variable JOIN_SPECIFICATION
			/// </summary>
			public const int VariableJoinSpecification = 0x0068;
			/// <summary>
			/// The unique identifier for variable JOIN_CONDITION
			/// </summary>
			public const int VariableJoinCondition = 0x0069;
			/// <summary>
			/// The unique identifier for variable SELECT
			/// </summary>
			public const int VariableSelect = 0x006A;
			/// <summary>
			/// The unique identifier for variable ORDER_BY
			/// </summary>
			public const int VariableOrderBy = 0x006B;
			/// <summary>
			/// The unique identifier for variable SORT_SPECIFICATION_LIST
			/// </summary>
			public const int VariableSortSpecificationList = 0x006C;
			/// <summary>
			/// The unique identifier for variable SORT_SPECIFICATION
			/// </summary>
			public const int VariableSortSpecification = 0x006D;
			/// <summary>
			/// The unique identifier for variable ORDERING_SPECIFICATION
			/// </summary>
			public const int VariableOrderingSpecification = 0x006E;
			/// <summary>
			/// The unique identifier for variable GROUP_BY
			/// </summary>
			public const int VariableGroupBy = 0x006F;
			/// <summary>
			/// The unique identifier for variable GROUP_SPECIFICATION_LIST
			/// </summary>
			public const int VariableGroupSpecificationList = 0x0070;
			/// <summary>
			/// The unique identifier for variable GROUP_SPECIFICATION
			/// </summary>
			public const int VariableGroupSpecification = 0x0071;
			/// <summary>
			/// The unique identifier for variable LIMIT_OFFSET
			/// </summary>
			public const int VariableLimitOffset = 0x0072;
			/// <summary>
			/// The unique identifier for variable LIMIT
			/// </summary>
			public const int VariableLimit = 0x0073;
			/// <summary>
			/// The unique identifier for variable OFFSET
			/// </summary>
			public const int VariableOffset = 0x0074;
			/// <summary>
			/// The unique identifier for variable INSERT
			/// </summary>
			public const int VariableInsert = 0x0075;
			/// <summary>
			/// The unique identifier for variable FIELDS
			/// </summary>
			public const int VariableFields = 0x0076;
			/// <summary>
			/// The unique identifier for variable FIELDS_LIST
			/// </summary>
			public const int VariableFieldsList = 0x0077;
			/// <summary>
			/// The unique identifier for variable VALUES
			/// </summary>
			public const int VariableValues = 0x0078;
			/// <summary>
			/// The unique identifier for variable VALUES_LIST
			/// </summary>
			public const int VariableValuesList = 0x0079;
			/// <summary>
			/// The unique identifier for variable TO_INSERT
			/// </summary>
			public const int VariableToInsert = 0x007A;
			/// <summary>
			/// The unique identifier for variable UPDATE
			/// </summary>
			public const int VariableUpdate = 0x007B;
			/// <summary>
			/// The unique identifier for variable UPDATE_LIST
			/// </summary>
			public const int VariableUpdateList = 0x007C;
			/// <summary>
			/// The unique identifier for variable UPDATE_ASSIGN
			/// </summary>
			public const int VariableUpdateAssign = 0x007D;
			/// <summary>
			/// The unique identifier for variable UPDATE_OPERAND
			/// </summary>
			public const int VariableUpdateOperand = 0x007E;
			/// <summary>
			/// The unique identifier for variable STATEMENT
			/// </summary>
			public const int VariableStatement = 0x007F;
			/// <summary>
			/// The unique identifier for variable ROOT
			/// </summary>
			public const int VariableRoot = 0x0080;
		}
		/// <summary>
		/// The collection of variables matched by this parser
		/// </summary>
		/// <remarks>
		/// The variables are in an order consistent with the automaton,
		/// so that variable indices in the automaton can be used to retrieve the variables in this table
		/// </remarks>
		private static readonly Symbol[] variables = {
			new Symbol(0x000C, "NULL"), 
			new Symbol(0x000D, "BOOLEAN_TRUE"), 
			new Symbol(0x000E, "BOOLEAN_FALSE"), 
			new Symbol(0x000F, "BOOLEAN_CONST"), 
			new Symbol(0x0010, "STRING_CONST"), 
			new Symbol(0x0011, "NUMBER_CONST"), 
			new Symbol(0x0012, "DATE_CONST"), 
			new Symbol(0x0013, "DATETIME_CONST"), 
			new Symbol(0x0014, "CONSTANT"), 
			new Symbol(0x0015, "EOS"), 
			new Symbol(0x0016, "NOP"), 
			new Symbol(0x0017, "MINUS_OP"), 
			new Symbol(0x0018, "PLUS_OP"), 
			new Symbol(0x0019, "MUL_OP"), 
			new Symbol(0x001A, "DIV_OP"), 
			new Symbol(0x001B, "CONCAT_OP"), 
			new Symbol(0x001C, "EQ_OP"), 
			new Symbol(0x001D, "NEQ_OP"), 
			new Symbol(0x001E, "GT_OP"), 
			new Symbol(0x001F, "GE_OP"), 
			new Symbol(0x0020, "LT_OP"), 
			new Symbol(0x0021, "LE_OP"), 
			new Symbol(0x0022, "EXACT_LIKE_OP"), 
			new Symbol(0x0023, "NOT_LIKE_OP"), 
			new Symbol(0x0024, "LIKE_OP"), 
			new Symbol(0x0025, "EXACT_IN_OP"), 
			new Symbol(0x0026, "NOT_IN_OP"), 
			new Symbol(0x0027, "IN_OP"), 
			new Symbol(0x0028, "EXACT_NULL_OP"), 
			new Symbol(0x0029, "NOT_NULL_OP"), 
			new Symbol(0x002A, "NULL_OP"), 
			new Symbol(0x002B, "CALL_ARGS"), 
			new Symbol(0x002C, "CALL_BRACKET"), 
			new Symbol(0x002D, "MATH_FUNC_NAME"), 
			new Symbol(0x002E, "MATH_FUNC_CALL"), 
			new Symbol(0x002F, "CAST_FUNC_NAME"), 
			new Symbol(0x0030, "CAST_FUNC_CALL"), 
			new Symbol(0x0031, "STR_FUNC_NAME"), 
			new Symbol(0x0032, "STR_FUNC_CALL"), 
			new Symbol(0x0033, "BOOL_STR_FUNC_NAME"), 
			new Symbol(0x0034, "BOOL_STR_FUNC_CALL"), 
			new Symbol(0x0035, "TRIM_LEADING"), 
			new Symbol(0x0036, "TRIM_TRAILING"), 
			new Symbol(0x0037, "TRIM_BOTH"), 
			new Symbol(0x0038, "TRIM_SPECIFICATION"), 
			new Symbol(0x0039, "TRIM_CALL"), 
			new Symbol(0x003A, "FUNC_CALL"), 
			new Symbol(0x003B, "BRACKET_EXPR"), 
			new Symbol(0x003C, "SELECT_EXPR"), 
			new Symbol(0x003D, "SIMPLE_EXPR"), 
			new Symbol(0x003E, "UNARY_EXPR"), 
			new Symbol(0x003F, "MUL_EXPR"), 
			new Symbol(0x0040, "ADD_EXPR"), 
			new Symbol(0x0041, "CONCAT_EXPR"), 
			new Symbol(0x0042, "COM_EXPR"), 
			new Symbol(0x0043, "REL_EXPR"), 
			new Symbol(0x0044, "LIKE_EXPR"), 
			new Symbol(0x0045, "IN_PREDICATE"), 
			new Symbol(0x0046, "IN_PREDICATE_VALUE"), 
			new Symbol(0x0047, "IN_VALUE_ARGS"), 
			new Symbol(0x0048, "IN_VALUE_LIST"), 
			new Symbol(0x0049, "NULL_PREDICATE"), 
			new Symbol(0x004A, "COMPARE_EXPR"), 
			new Symbol(0x004B, "NOT_OP"), 
			new Symbol(0x004C, "AND_OP"), 
			new Symbol(0x004D, "OR_OP"), 
			new Symbol(0x004E, "UX_BOOL_EXPR"), 
			new Symbol(0x004F, "AND_BOOL_EXPR"), 
			new Symbol(0x0050, "OR_BOOL_EXPR"), 
			new Symbol(0x0051, "EXPR"), 
			new Symbol(0x0052, "BOOL_EXPR"), 
			new Symbol(0x0053, "SET_QUANTIFIER"), 
			new Symbol(0x0054, "ASRERISK"), 
			new Symbol(0x0055, "AGGR_CALL_BRACKET"), 
			new Symbol(0x0056, "AGGR_FUNC"), 
			new Symbol(0x0057, "AGGR_COUNT_ALL"), 
			new Symbol(0x0058, "AGGR_CALL"), 
			new Symbol(0x0059, "SELECT_SUBLIST"), 
			new Symbol(0x005A, "EXPR_ALIAS"), 
			new Symbol(0x005B, "FIELD"), 
			new Symbol(0x005C, "SELECT_LIST"), 
			new Symbol(0x005D, "TABLE_EXPRESSION"), 
			new Symbol(0x005E, "WHERE_CLAUSE"), 
			new Symbol(0x005F, "FROM_CLAUSE"), 
			new Symbol(0x0060, "TABLE_REFERENCE_LIST"), 
			new Symbol(0x0061, "TABLE_REFERENCE"), 
			new Symbol(0x0062, "TABLE_PRIMARY"), 
			new Symbol(0x0063, "JOINED_TABLE"), 
			new Symbol(0x0064, "AUTO_JOIN"), 
			new Symbol(0x0065, "QUALIFIED_JOIN"), 
			new Symbol(0x0066, "JOIN_TYPE"), 
			new Symbol(0x0067, "OUTER_JOIN_TYPE"), 
			new Symbol(0x0068, "JOIN_SPECIFICATION"), 
			new Symbol(0x0069, "JOIN_CONDITION"), 
			new Symbol(0x006A, "SELECT"), 
			new Symbol(0x006B, "ORDER_BY"), 
			new Symbol(0x006C, "SORT_SPECIFICATION_LIST"), 
			new Symbol(0x006D, "SORT_SPECIFICATION"), 
			new Symbol(0x006E, "ORDERING_SPECIFICATION"), 
			new Symbol(0x006F, "GROUP_BY"), 
			new Symbol(0x0070, "GROUP_SPECIFICATION_LIST"), 
			new Symbol(0x0071, "GROUP_SPECIFICATION"), 
			new Symbol(0x0072, "LIMIT_OFFSET"), 
			new Symbol(0x0073, "LIMIT"), 
			new Symbol(0x0074, "OFFSET"), 
			new Symbol(0x0075, "INSERT"), 
			new Symbol(0x0076, "FIELDS"), 
			new Symbol(0x0077, "FIELDS_LIST"), 
			new Symbol(0x0078, "VALUES"), 
			new Symbol(0x0079, "VALUES_LIST"), 
			new Symbol(0x007A, "TO_INSERT"), 
			new Symbol(0x007B, "UPDATE"), 
			new Symbol(0x007C, "UPDATE_LIST"), 
			new Symbol(0x007D, "UPDATE_ASSIGN"), 
			new Symbol(0x007E, "UPDATE_OPERAND"), 
			new Symbol(0x007F, "STATEMENT"), 
			new Symbol(0x0080, "ROOT"), 
			new Symbol(0x0087, "__V135"), 
			new Symbol(0x0098, "__V152"), 
			new Symbol(0x00AC, "__V172"), 
			new Symbol(0x00B7, "__V183"), 
			new Symbol(0x00BC, "__V188"), 
			new Symbol(0x00C7, "__V199"), 
			new Symbol(0x00CB, "__V203"), 
			new Symbol(0x00D0, "__V208"), 
			new Symbol(0x00D1, "__V209"), 
			new Symbol(0x00D5, "__V213"), 
			new Symbol(0x00D6, "__V214"), 
			new Symbol(0x00D7, "__VAxiom") };
		/// <summary>
		/// The collection of virtuals matched by this parser
		/// </summary>
		/// <remarks>
		/// The virtuals are in an order consistent with the automaton,
		/// so that virtual indices in the automaton can be used to retrieve the virtuals in this table
		/// </remarks>
		private static readonly Symbol[] virtuals = {
 };
		/// <summary>
		/// Initializes a new instance of the parser
		/// </summary>
		/// <param name="lexer">The input lexer</param>
		public SqlParser(SqlLexer lexer) : base (commonAutomaton, variables, virtuals, null, lexer) { }

		/// <summary>
		/// Visitor interface
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.0.0")]
		public class Visitor
		{
			public virtual void OnTerminalNewLine(ASTNode node) {}
			public virtual void OnTerminalWhiteSpace(ASTNode node) {}
			public virtual void OnTerminalInteger(ASTNode node) {}
			public virtual void OnTerminalReal(ASTNode node) {}
			public virtual void OnTerminalStringdq(ASTNode node) {}
			public virtual void OnTerminalStringsq(ASTNode node) {}
			public virtual void OnTerminalCommentLine(ASTNode node) {}
			public virtual void OnTerminalIdentifier(ASTNode node) {}
			public virtual void OnTerminalSeparator(ASTNode node) {}
			public virtual void OnVariableNull(ASTNode node) {}
			public virtual void OnVariableBooleanTrue(ASTNode node) {}
			public virtual void OnVariableBooleanFalse(ASTNode node) {}
			public virtual void OnVariableBooleanConst(ASTNode node) {}
			public virtual void OnVariableStringConst(ASTNode node) {}
			public virtual void OnVariableNumberConst(ASTNode node) {}
			public virtual void OnVariableDateConst(ASTNode node) {}
			public virtual void OnVariableDatetimeConst(ASTNode node) {}
			public virtual void OnVariableConstant(ASTNode node) {}
			public virtual void OnVariableEos(ASTNode node) {}
			public virtual void OnVariableNop(ASTNode node) {}
			public virtual void OnVariableMinusOp(ASTNode node) {}
			public virtual void OnVariablePlusOp(ASTNode node) {}
			public virtual void OnVariableMulOp(ASTNode node) {}
			public virtual void OnVariableDivOp(ASTNode node) {}
			public virtual void OnVariableConcatOp(ASTNode node) {}
			public virtual void OnVariableEqOp(ASTNode node) {}
			public virtual void OnVariableNeqOp(ASTNode node) {}
			public virtual void OnVariableGtOp(ASTNode node) {}
			public virtual void OnVariableGeOp(ASTNode node) {}
			public virtual void OnVariableLtOp(ASTNode node) {}
			public virtual void OnVariableLeOp(ASTNode node) {}
			public virtual void OnVariableExactLikeOp(ASTNode node) {}
			public virtual void OnVariableNotLikeOp(ASTNode node) {}
			public virtual void OnVariableLikeOp(ASTNode node) {}
			public virtual void OnVariableExactInOp(ASTNode node) {}
			public virtual void OnVariableNotInOp(ASTNode node) {}
			public virtual void OnVariableInOp(ASTNode node) {}
			public virtual void OnVariableExactNullOp(ASTNode node) {}
			public virtual void OnVariableNotNullOp(ASTNode node) {}
			public virtual void OnVariableNullOp(ASTNode node) {}
			public virtual void OnVariableCallArgs(ASTNode node) {}
			public virtual void OnVariableCallBracket(ASTNode node) {}
			public virtual void OnVariableMathFuncName(ASTNode node) {}
			public virtual void OnVariableMathFuncCall(ASTNode node) {}
			public virtual void OnVariableCastFuncName(ASTNode node) {}
			public virtual void OnVariableCastFuncCall(ASTNode node) {}
			public virtual void OnVariableStrFuncName(ASTNode node) {}
			public virtual void OnVariableStrFuncCall(ASTNode node) {}
			public virtual void OnVariableBoolStrFuncName(ASTNode node) {}
			public virtual void OnVariableBoolStrFuncCall(ASTNode node) {}
			public virtual void OnVariableTrimLeading(ASTNode node) {}
			public virtual void OnVariableTrimTrailing(ASTNode node) {}
			public virtual void OnVariableTrimBoth(ASTNode node) {}
			public virtual void OnVariableTrimSpecification(ASTNode node) {}
			public virtual void OnVariableTrimCall(ASTNode node) {}
			public virtual void OnVariableFuncCall(ASTNode node) {}
			public virtual void OnVariableBracketExpr(ASTNode node) {}
			public virtual void OnVariableSelectExpr(ASTNode node) {}
			public virtual void OnVariableSimpleExpr(ASTNode node) {}
			public virtual void OnVariableUnaryExpr(ASTNode node) {}
			public virtual void OnVariableMulExpr(ASTNode node) {}
			public virtual void OnVariableAddExpr(ASTNode node) {}
			public virtual void OnVariableConcatExpr(ASTNode node) {}
			public virtual void OnVariableComExpr(ASTNode node) {}
			public virtual void OnVariableRelExpr(ASTNode node) {}
			public virtual void OnVariableLikeExpr(ASTNode node) {}
			public virtual void OnVariableInPredicate(ASTNode node) {}
			public virtual void OnVariableInPredicateValue(ASTNode node) {}
			public virtual void OnVariableInValueArgs(ASTNode node) {}
			public virtual void OnVariableInValueList(ASTNode node) {}
			public virtual void OnVariableNullPredicate(ASTNode node) {}
			public virtual void OnVariableCompareExpr(ASTNode node) {}
			public virtual void OnVariableNotOp(ASTNode node) {}
			public virtual void OnVariableAndOp(ASTNode node) {}
			public virtual void OnVariableOrOp(ASTNode node) {}
			public virtual void OnVariableUxBoolExpr(ASTNode node) {}
			public virtual void OnVariableAndBoolExpr(ASTNode node) {}
			public virtual void OnVariableOrBoolExpr(ASTNode node) {}
			public virtual void OnVariableExpr(ASTNode node) {}
			public virtual void OnVariableBoolExpr(ASTNode node) {}
			public virtual void OnVariableSetQuantifier(ASTNode node) {}
			public virtual void OnVariableAsrerisk(ASTNode node) {}
			public virtual void OnVariableAggrCallBracket(ASTNode node) {}
			public virtual void OnVariableAggrFunc(ASTNode node) {}
			public virtual void OnVariableAggrCountAll(ASTNode node) {}
			public virtual void OnVariableAggrCall(ASTNode node) {}
			public virtual void OnVariableSelectSublist(ASTNode node) {}
			public virtual void OnVariableExprAlias(ASTNode node) {}
			public virtual void OnVariableField(ASTNode node) {}
			public virtual void OnVariableSelectList(ASTNode node) {}
			public virtual void OnVariableTableExpression(ASTNode node) {}
			public virtual void OnVariableWhereClause(ASTNode node) {}
			public virtual void OnVariableFromClause(ASTNode node) {}
			public virtual void OnVariableTableReferenceList(ASTNode node) {}
			public virtual void OnVariableTableReference(ASTNode node) {}
			public virtual void OnVariableTablePrimary(ASTNode node) {}
			public virtual void OnVariableJoinedTable(ASTNode node) {}
			public virtual void OnVariableAutoJoin(ASTNode node) {}
			public virtual void OnVariableQualifiedJoin(ASTNode node) {}
			public virtual void OnVariableJoinType(ASTNode node) {}
			public virtual void OnVariableOuterJoinType(ASTNode node) {}
			public virtual void OnVariableJoinSpecification(ASTNode node) {}
			public virtual void OnVariableJoinCondition(ASTNode node) {}
			public virtual void OnVariableSelect(ASTNode node) {}
			public virtual void OnVariableOrderBy(ASTNode node) {}
			public virtual void OnVariableSortSpecificationList(ASTNode node) {}
			public virtual void OnVariableSortSpecification(ASTNode node) {}
			public virtual void OnVariableOrderingSpecification(ASTNode node) {}
			public virtual void OnVariableGroupBy(ASTNode node) {}
			public virtual void OnVariableGroupSpecificationList(ASTNode node) {}
			public virtual void OnVariableGroupSpecification(ASTNode node) {}
			public virtual void OnVariableLimitOffset(ASTNode node) {}
			public virtual void OnVariableLimit(ASTNode node) {}
			public virtual void OnVariableOffset(ASTNode node) {}
			public virtual void OnVariableInsert(ASTNode node) {}
			public virtual void OnVariableFields(ASTNode node) {}
			public virtual void OnVariableFieldsList(ASTNode node) {}
			public virtual void OnVariableValues(ASTNode node) {}
			public virtual void OnVariableValuesList(ASTNode node) {}
			public virtual void OnVariableToInsert(ASTNode node) {}
			public virtual void OnVariableUpdate(ASTNode node) {}
			public virtual void OnVariableUpdateList(ASTNode node) {}
			public virtual void OnVariableUpdateAssign(ASTNode node) {}
			public virtual void OnVariableUpdateOperand(ASTNode node) {}
			public virtual void OnVariableStatement(ASTNode node) {}
			public virtual void OnVariableRoot(ASTNode node) {}
		}

		/// <summary>
		/// Walk the AST of a result using a visitor
		/// <param name="result">The parse result</param>
		/// <param name="visitor">The visitor to use</param>
		/// </summary>
		public static void Visit(ParseResult result, Visitor visitor)
		{
			VisitASTNode(result.Root, visitor);
		}

		/// <summary>
		/// Walk the sub-AST from the specified node using a visitor
		/// </summary>
		/// <param name="node">The AST node to start from</param>
		/// <param name="visitor">The visitor to use</param>
		public static void VisitASTNode(ASTNode node, Visitor visitor)
		{
			for (int i = 0; i < node.Children.Count; i++)
				VisitASTNode(node.Children[i], visitor);
			switch(node.Symbol.ID)
			{
				case 0x0003: visitor.OnTerminalNewLine(node); break;
				case 0x0004: visitor.OnTerminalWhiteSpace(node); break;
				case 0x0005: visitor.OnTerminalInteger(node); break;
				case 0x0006: visitor.OnTerminalReal(node); break;
				case 0x0007: visitor.OnTerminalStringdq(node); break;
				case 0x0008: visitor.OnTerminalStringsq(node); break;
				case 0x0009: visitor.OnTerminalCommentLine(node); break;
				case 0x000A: visitor.OnTerminalIdentifier(node); break;
				case 0x000B: visitor.OnTerminalSeparator(node); break;
				case 0x000C: visitor.OnVariableNull(node); break;
				case 0x000D: visitor.OnVariableBooleanTrue(node); break;
				case 0x000E: visitor.OnVariableBooleanFalse(node); break;
				case 0x000F: visitor.OnVariableBooleanConst(node); break;
				case 0x0010: visitor.OnVariableStringConst(node); break;
				case 0x0011: visitor.OnVariableNumberConst(node); break;
				case 0x0012: visitor.OnVariableDateConst(node); break;
				case 0x0013: visitor.OnVariableDatetimeConst(node); break;
				case 0x0014: visitor.OnVariableConstant(node); break;
				case 0x0015: visitor.OnVariableEos(node); break;
				case 0x0016: visitor.OnVariableNop(node); break;
				case 0x0017: visitor.OnVariableMinusOp(node); break;
				case 0x0018: visitor.OnVariablePlusOp(node); break;
				case 0x0019: visitor.OnVariableMulOp(node); break;
				case 0x001A: visitor.OnVariableDivOp(node); break;
				case 0x001B: visitor.OnVariableConcatOp(node); break;
				case 0x001C: visitor.OnVariableEqOp(node); break;
				case 0x001D: visitor.OnVariableNeqOp(node); break;
				case 0x001E: visitor.OnVariableGtOp(node); break;
				case 0x001F: visitor.OnVariableGeOp(node); break;
				case 0x0020: visitor.OnVariableLtOp(node); break;
				case 0x0021: visitor.OnVariableLeOp(node); break;
				case 0x0022: visitor.OnVariableExactLikeOp(node); break;
				case 0x0023: visitor.OnVariableNotLikeOp(node); break;
				case 0x0024: visitor.OnVariableLikeOp(node); break;
				case 0x0025: visitor.OnVariableExactInOp(node); break;
				case 0x0026: visitor.OnVariableNotInOp(node); break;
				case 0x0027: visitor.OnVariableInOp(node); break;
				case 0x0028: visitor.OnVariableExactNullOp(node); break;
				case 0x0029: visitor.OnVariableNotNullOp(node); break;
				case 0x002A: visitor.OnVariableNullOp(node); break;
				case 0x002B: visitor.OnVariableCallArgs(node); break;
				case 0x002C: visitor.OnVariableCallBracket(node); break;
				case 0x002D: visitor.OnVariableMathFuncName(node); break;
				case 0x002E: visitor.OnVariableMathFuncCall(node); break;
				case 0x002F: visitor.OnVariableCastFuncName(node); break;
				case 0x0030: visitor.OnVariableCastFuncCall(node); break;
				case 0x0031: visitor.OnVariableStrFuncName(node); break;
				case 0x0032: visitor.OnVariableStrFuncCall(node); break;
				case 0x0033: visitor.OnVariableBoolStrFuncName(node); break;
				case 0x0034: visitor.OnVariableBoolStrFuncCall(node); break;
				case 0x0035: visitor.OnVariableTrimLeading(node); break;
				case 0x0036: visitor.OnVariableTrimTrailing(node); break;
				case 0x0037: visitor.OnVariableTrimBoth(node); break;
				case 0x0038: visitor.OnVariableTrimSpecification(node); break;
				case 0x0039: visitor.OnVariableTrimCall(node); break;
				case 0x003A: visitor.OnVariableFuncCall(node); break;
				case 0x003B: visitor.OnVariableBracketExpr(node); break;
				case 0x003C: visitor.OnVariableSelectExpr(node); break;
				case 0x003D: visitor.OnVariableSimpleExpr(node); break;
				case 0x003E: visitor.OnVariableUnaryExpr(node); break;
				case 0x003F: visitor.OnVariableMulExpr(node); break;
				case 0x0040: visitor.OnVariableAddExpr(node); break;
				case 0x0041: visitor.OnVariableConcatExpr(node); break;
				case 0x0042: visitor.OnVariableComExpr(node); break;
				case 0x0043: visitor.OnVariableRelExpr(node); break;
				case 0x0044: visitor.OnVariableLikeExpr(node); break;
				case 0x0045: visitor.OnVariableInPredicate(node); break;
				case 0x0046: visitor.OnVariableInPredicateValue(node); break;
				case 0x0047: visitor.OnVariableInValueArgs(node); break;
				case 0x0048: visitor.OnVariableInValueList(node); break;
				case 0x0049: visitor.OnVariableNullPredicate(node); break;
				case 0x004A: visitor.OnVariableCompareExpr(node); break;
				case 0x004B: visitor.OnVariableNotOp(node); break;
				case 0x004C: visitor.OnVariableAndOp(node); break;
				case 0x004D: visitor.OnVariableOrOp(node); break;
				case 0x004E: visitor.OnVariableUxBoolExpr(node); break;
				case 0x004F: visitor.OnVariableAndBoolExpr(node); break;
				case 0x0050: visitor.OnVariableOrBoolExpr(node); break;
				case 0x0051: visitor.OnVariableExpr(node); break;
				case 0x0052: visitor.OnVariableBoolExpr(node); break;
				case 0x0053: visitor.OnVariableSetQuantifier(node); break;
				case 0x0054: visitor.OnVariableAsrerisk(node); break;
				case 0x0055: visitor.OnVariableAggrCallBracket(node); break;
				case 0x0056: visitor.OnVariableAggrFunc(node); break;
				case 0x0057: visitor.OnVariableAggrCountAll(node); break;
				case 0x0058: visitor.OnVariableAggrCall(node); break;
				case 0x0059: visitor.OnVariableSelectSublist(node); break;
				case 0x005A: visitor.OnVariableExprAlias(node); break;
				case 0x005B: visitor.OnVariableField(node); break;
				case 0x005C: visitor.OnVariableSelectList(node); break;
				case 0x005D: visitor.OnVariableTableExpression(node); break;
				case 0x005E: visitor.OnVariableWhereClause(node); break;
				case 0x005F: visitor.OnVariableFromClause(node); break;
				case 0x0060: visitor.OnVariableTableReferenceList(node); break;
				case 0x0061: visitor.OnVariableTableReference(node); break;
				case 0x0062: visitor.OnVariableTablePrimary(node); break;
				case 0x0063: visitor.OnVariableJoinedTable(node); break;
				case 0x0064: visitor.OnVariableAutoJoin(node); break;
				case 0x0065: visitor.OnVariableQualifiedJoin(node); break;
				case 0x0066: visitor.OnVariableJoinType(node); break;
				case 0x0067: visitor.OnVariableOuterJoinType(node); break;
				case 0x0068: visitor.OnVariableJoinSpecification(node); break;
				case 0x0069: visitor.OnVariableJoinCondition(node); break;
				case 0x006A: visitor.OnVariableSelect(node); break;
				case 0x006B: visitor.OnVariableOrderBy(node); break;
				case 0x006C: visitor.OnVariableSortSpecificationList(node); break;
				case 0x006D: visitor.OnVariableSortSpecification(node); break;
				case 0x006E: visitor.OnVariableOrderingSpecification(node); break;
				case 0x006F: visitor.OnVariableGroupBy(node); break;
				case 0x0070: visitor.OnVariableGroupSpecificationList(node); break;
				case 0x0071: visitor.OnVariableGroupSpecification(node); break;
				case 0x0072: visitor.OnVariableLimitOffset(node); break;
				case 0x0073: visitor.OnVariableLimit(node); break;
				case 0x0074: visitor.OnVariableOffset(node); break;
				case 0x0075: visitor.OnVariableInsert(node); break;
				case 0x0076: visitor.OnVariableFields(node); break;
				case 0x0077: visitor.OnVariableFieldsList(node); break;
				case 0x0078: visitor.OnVariableValues(node); break;
				case 0x0079: visitor.OnVariableValuesList(node); break;
				case 0x007A: visitor.OnVariableToInsert(node); break;
				case 0x007B: visitor.OnVariableUpdate(node); break;
				case 0x007C: visitor.OnVariableUpdateList(node); break;
				case 0x007D: visitor.OnVariableUpdateAssign(node); break;
				case 0x007E: visitor.OnVariableUpdateOperand(node); break;
				case 0x007F: visitor.OnVariableStatement(node); break;
				case 0x0080: visitor.OnVariableRoot(node); break;
			}
		}
	}
}
