/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.5.0.0
 */
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using Hime.Redist;
using Hime.Redist.Lexer;

namespace Gehtsoft.EF.Db.SqlDb.Sql
{
	/// <summary>
	/// Represents a lexer
	/// </summary>
	[GeneratedCodeAttribute("Hime.SDK", "3.5.0.0")]
	public class SqlLexer : ContextFreeLexer
	{
		/// <summary>
		/// The automaton for this lexer
		/// </summary>
		private static readonly Automaton commonAutomaton = Automaton.Find(typeof(SqlLexer), "SqlLexer.bin");
		/// <summary>
		/// Contains the constant IDs for the terminals for this lexer
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.0.0")]
		public class ID
		{
			/// <summary>
			/// The unique identifier for terminal NEW_LINE
			/// </summary>
			public const int TerminalNewLine = 0x0003;
			/// <summary>
			/// The unique identifier for terminal WHITE_SPACE
			/// </summary>
			public const int TerminalWhiteSpace = 0x0004;
			/// <summary>
			/// The unique identifier for terminal INT
			/// </summary>
			public const int TerminalInt = 0x0005;
			/// <summary>
			/// The unique identifier for terminal REAL
			/// </summary>
			public const int TerminalReal = 0x0006;
			/// <summary>
			/// The unique identifier for terminal STRINGDQ
			/// </summary>
			public const int TerminalStringdq = 0x0007;
			/// <summary>
			/// The unique identifier for terminal STRINGSQ
			/// </summary>
			public const int TerminalStringsq = 0x0008;
			/// <summary>
			/// The unique identifier for terminal COMMENT_LINE
			/// </summary>
			public const int TerminalCommentLine = 0x0009;
			/// <summary>
			/// The unique identifier for terminal IDENTIFIER
			/// </summary>
			public const int TerminalIdentifier = 0x000A;
			/// <summary>
			/// The unique identifier for terminal SEPARATOR
			/// </summary>
			public const int TerminalSeparator = 0x000B;
			/// <summary>
			/// The unique identifier for terminal GLOBAL_PARAMETER_NAME
			/// </summary>
			public const int TerminalGlobalParameterName = 0x000C;
		}
		/// <summary>
		/// Contains the constant IDs for the contexts for this lexer
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.0.0")]
		public class Context
		{
			/// <summary>
			/// The unique identifier for the default context
			/// </summary>
			public const int Default = 0;
		}
		/// <summary>
		/// The collection of terminals matched by this lexer
		/// </summary>
		/// <remarks>
		/// The terminals are in an order consistent with the automaton,
		/// so that terminal indices in the automaton can be used to retrieve the terminals in this table
		/// </remarks>
		private static readonly Symbol[] terminals = {
			new Symbol(0x0001, "Îµ"),
			new Symbol(0x0002, "$"),
			new Symbol(0x0003, "NEW_LINE"),
			new Symbol(0x0004, "WHITE_SPACE"),
			new Symbol(0x0005, "INT"),
			new Symbol(0x0006, "REAL"),
			new Symbol(0x0007, "STRINGDQ"),
			new Symbol(0x0008, "STRINGSQ"),
			new Symbol(0x0009, "COMMENT_LINE"),
			new Symbol(0x000A, "IDENTIFIER"),
			new Symbol(0x000B, "SEPARATOR"),
			new Symbol(0x000C, "GLOBAL_PARAMETER_NAME"),
			new Symbol(0x0096, "NULL"),
			new Symbol(0x0097, "TRUE"),
			new Symbol(0x0098, "FALSE"),
			new Symbol(0x0099, "DATE"),
			new Symbol(0x009A, "DATETIME"),
			new Symbol(0x009B, ";"),
			new Symbol(0x009D, "-"),
			new Symbol(0x009E, "+"),
			new Symbol(0x009F, "*"),
			new Symbol(0x00A0, "/"),
			new Symbol(0x00A1, "||"),
			new Symbol(0x00A2, "="),
			new Symbol(0x00A3, "<>"),
			new Symbol(0x00A4, ">"),
			new Symbol(0x00A5, ">="),
			new Symbol(0x00A6, "<"),
			new Symbol(0x00A7, "<="),
			new Symbol(0x00A8, "LIKE"),
			new Symbol(0x00A9, "NOT"),
			new Symbol(0x00AA, "IN"),
			new Symbol(0x00AB, "IS"),
			new Symbol(0x00AC, ","),
			new Symbol(0x00AE, "("),
			new Symbol(0x00AF, ")"),
			new Symbol(0x00B0, "ABS"),
			new Symbol(0x00B1, "TOSTRING"),
			new Symbol(0x00B2, "TOINT"),
			new Symbol(0x00B3, "TODOUBLE"),
			new Symbol(0x00B4, "TODATE"),
			new Symbol(0x00B5, "TOTIMESTAMP"),
			new Symbol(0x00B6, "TRIM"),
			new Symbol(0x00B7, "LTRIM"),
			new Symbol(0x00B8, "RTRIM"),
			new Symbol(0x00B9, "UPPER"),
			new Symbol(0x00BA, "LOWER"),
			new Symbol(0x00BB, "CONTAINS"),
			new Symbol(0x00BC, "ENDSWITH"),
			new Symbol(0x00BD, "STARTSWITH"),
			new Symbol(0x00BE, "LEADING"),
			new Symbol(0x00BF, "TRAILING"),
			new Symbol(0x00C0, "BOTH"),
			new Symbol(0x00C1, "LAST_RESULT"),
			new Symbol(0x00C2, "ROWS_COUNT"),
			new Symbol(0x00C3, "STRING"),
			new Symbol(0x00C4, "INTEGER"),
			new Symbol(0x00C5, "DOUBLE"),
			new Symbol(0x00C6, "BOOLEAN"),
			new Symbol(0x00C7, "ROW"),
			new Symbol(0x00C8, "ROWSET"),
			new Symbol(0x00C9, "AS"),
			new Symbol(0x00CB, "AND"),
			new Symbol(0x00CC, "OR"),
			new Symbol(0x00CD, "DISTINCT"),
			new Symbol(0x00CE, "ALL"),
			new Symbol(0x00CF, "COUNT"),
			new Symbol(0x00D0, "MAX"),
			new Symbol(0x00D1, "MIN"),
			new Symbol(0x00D2, "AVG"),
			new Symbol(0x00D3, "SUM"),
			new Symbol(0x00D4, "COUNT(*)"),
			new Symbol(0x00D6, "."),
			new Symbol(0x00D7, "WHERE"),
			new Symbol(0x00D8, "FROM"),
			new Symbol(0x00DA, "AUTO"),
			new Symbol(0x00DB, "JOIN"),
			new Symbol(0x00DC, "INNER"),
			new Symbol(0x00DD, "OUTER"),
			new Symbol(0x00DE, "LEFT"),
			new Symbol(0x00DF, "RIGHT"),
			new Symbol(0x00E0, "FULL"),
			new Symbol(0x00E1, "ON"),
			new Symbol(0x00E2, "SELECT"),
			new Symbol(0x00E3, "ORDER BY"),
			new Symbol(0x00E5, "ASC"),
			new Symbol(0x00E6, "DESC"),
			new Symbol(0x00E7, "GROUP BY"),
			new Symbol(0x00E9, "LIMIT"),
			new Symbol(0x00EA, "OFFSET"),
			new Symbol(0x00EB, "INSERT"),
			new Symbol(0x00EC, "INTO"),
			new Symbol(0x00EF, "VALUES"),
			new Symbol(0x00F0, "UPDATE"),
			new Symbol(0x00F1, "SET"),
			new Symbol(0x00F3, "DELETE"),
			new Symbol(0x00F5, "DECLARE"),
			new Symbol(0x00F7, "EXIT"),
			new Symbol(0x00F8, "WITH"),
			new Symbol(0x00FA, "IF"),
			new Symbol(0x00FB, "THEN"),
			new Symbol(0x00FC, "ELSIF"),
			new Symbol(0x00FE, "ELSE"),
			new Symbol(0x00FF, "END"),
			new Symbol(0x0100, "WHILE"),
			new Symbol(0x0101, "LOOP"),
			new Symbol(0x0102, "BREAK"),
			new Symbol(0x0103, "CONTINUE"),
			new Symbol(0x0104, "FOR"),
			new Symbol(0x0105, "NEXT"),
			new Symbol(0x0106, "SWITCH"),
			new Symbol(0x0107, "CASE"),
			new Symbol(0x0108, ":"),
			new Symbol(0x010A, "OTHERWISE") };
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public SqlLexer(string input) : base(commonAutomaton, terminals, 0x000B, input) {}
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public SqlLexer(TextReader input) : base(commonAutomaton, terminals, 0x000B, input) {}
	}
}
