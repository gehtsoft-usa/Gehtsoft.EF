<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Gehtsoft.Validator</name>
  </assembly>
  <members>
    <member name="T:Gehtsoft.Validator.AbstractValidator`1">
      <summary>The parameterized generic for defining validators.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.AbstractValidator`1.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.AbstractValidator`1.When(System.Func`2)">
      <summary>Sets "when" predicate.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.AbstractValidator`1.Unless(System.Func`2)">
      <summary>Set "unless" predicate.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.AbstractValidator`1.RuleForEntity(System.String)">
      <summary>Sets the rule for the whole entity.</summary>
      <param name="name">The name to be used in case the rule is failed.</param>
    </member>
    <member name="M:Gehtsoft.Validator.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func`2},System.Boolean)">
      <summary>Sets the rule for a property.</summary>
      <param name="accessor">The property accessor.</param>
      <param name="name">The name to be used.</param>
    </member>
    <member name="M:Gehtsoft.Validator.AbstractValidator`1.RuleForForAll``1(System.Linq.Expressions.Expression{System.Func`2},System.Boolean)">
      <summary>Sets the rule for each element in the property.</summary>
      <param name="accessor" />
      <param name="name">You may specify the name in case you want to customize how the name appears in the failure.</param>
    </member>
    <member name="T:Gehtsoft.Validator.BaseValidator">
      <summary>Basic validator.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.BaseValidator.#ctor(System.Type)">
      <summary>Constructor.</summary>
      <param name="validateType">The type to be validated.</param>
    </member>
    <member name="M:Gehtsoft.Validator.BaseValidator.When(Gehtsoft.Validator.IValidationPredicate)">
      <summary>Sets "when" predicate.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.BaseValidator.Unless(Gehtsoft.Validator.IValidationPredicate)">
      <summary>Sets "unless" predicate.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.BaseValidator.RuleForEntity(System.String)">
      <summary>Add a rule for the whole object.</summary>
      <param name="name" />
    </member>
    <member name="M:Gehtsoft.Validator.BaseValidator.RuleFor(System.String)">
      <summary>Adds a rule for the object property.</summary>
      <param name="propertyName" />
    </member>
    <member name="M:Gehtsoft.Validator.BaseValidator.RuleForAll(System.String)">
      <summary>Sets a rule for each element of the object property.</summary>
      <param name="propertyName" />
    </member>
    <member name="T:Gehtsoft.Validator.GenericValidationRuleBuilder`2">
      <summary>The rule binder for AbstractValidator</summary>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.Must(System.Func`2)">
      <summary>Sets validation predicate as a function.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.WhenValue(System.Func`2)">
      <summary>Sets "when" predicate for the value.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.WhenNotNull(System.Func`2)">
      <summary>Sets validation only when the value is not null</summary>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.WhenEntity(System.Func`2)">
      <summary>Sets "when" predicate for the entity.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.UnlessValue(System.Func`2)">
      <summary>Sets "unless" predicate for the value.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.UnlessEntity(System.Func`2)">
      <summary>Sets "unless" predicate for the entity.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.Null">
      <summary>Sets the validation predicate to the check whether the value is null.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.NotNull">
      <summary>Sets the validation predicate to the check whether the value is not null.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.NotNullOrEmpty">
      <summary>Sets the validation predicate to the check whether the value is not null or empty.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.NotNullOrWhitespace">
      <summary>Sets the validation predicate to the check whether the value is not null, and is not an empty or whitespace string.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.ShorterThan(System.Int32)">
      <summary>Sets the validation predicate to the check whether the value length is shorter than the value specified.</summary>
      <param name="length">The length limit. Use the maximum desired length plus 1. In other words, this value is not the last permitted length, it is the first
wrong length value.</param>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.DoesMatch(System.String)">
      <summary>Sets the validation predicate to the check whether the string value matches the regular expression specified.</summary>
      <param name="pattern">The regular expression pattern to be checked.</param>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.DoesNotMatch(System.String)">
      <summary>Sets the validation predicate to the check whether the string value does not match the regular expression specified.</summary>
      <param name="pattern">The regular expression pattern to be checked.</param>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.EnumIsCorrect">
      <summary>Sets the validation predicate to the check whether the enumeration value is a correct enumeration value.</summary>
      <param name="T, enumType">The type of the enumeration.</param>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.Between(`1,`1)">
      <summary>Checks whether the value is between the specified limits.</summary>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
      <param name="minInclusive">The flag indicating whether the minimum value is inclusive (true by default).</param>
      <param name="maxInclusive">The flag indicating whether the maximum value is inclusive (true by default).</param>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.WithCode(System.Int32)">
      <summary>Sets the error code.</summary>
      <param name="code" />
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.WithMessage(System.String)">
      <summary>Sets the message.</summary>
      <param name="message" />
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.ValidateUsing(System.Type)">
      <summary>Sets the validator to be used to validate the value.</summary>
      <param name="validatorType, TX">The type of the validator.</param>
      <param name="args">The arguments for the constructor in case the other then default constructor is desired to be used.</param>
      <param name="validator">An instance of the validator to be used.</param>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.EmailAddress">
      <summary>Sets the validation whether the mail address is correct.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.NotSQLInjection">
      <summary>Sets the validation whether the value is not an SQL Injection attempt</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.NotHTML">
      <summary>Sets the validation whether the value is not an HTML Injection attempt</summary>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.CreditCardNumber">
      <summary>Sets the validation whether the credit card number is correct.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.ServerOnly">
      <summary>Makes the validation rule a server-only one.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.ServerOnly">
      <summary>Creates a new rule for the same target and the condition opposite to the condition of the original rule.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.GenericValidationRuleBuilder`2.Also">
      <summary>Creates a new rule for the same target and the same condition</summary>
    </member>
    <member name="T:Gehtsoft.Validator.IValidationMessageResolver">
      <summary>The interface that translates the validation message into a readable message.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.IValidationMessageResolver.Resolve(Gehtsoft.Validator.ValidationTarget,System.Int32,System.String)">
      <summary>Translate the message.</summary>
      <param name="entityType">The type of the entity to be validated.</param>
      <param name="target">The target within the entity to be validated.</param>
      <param name="code">The error code set.</param>
      <param name="message">The error message what is being set.</param>
    </member>
    <member name="T:Gehtsoft.Validator.IValidationPredicate">
      <summary>The validation predicate interface.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.IValidationPredicate.Validate(System.Object)">
      <summary>Validates the value.</summary>
      <param name="value" />
    </member>
    <member name="P:Gehtsoft.Validator.IValidationPredicate.ParameterType">
      <summary>The expected type of the value to be validated.</summary>
    </member>
    <member name="T:Gehtsoft.Validator.IBaseValidator">
      <summary>Base interface for all validators</summary>
    </member>
    <member name="M:Gehtsoft.Validator.IBaseValidator.Validate(System.Object)">
      <summary>Performs the validation.</summary>
      <param name="entity" />
    </member>
    <member name="T:Gehtsoft.Validator.IValidator`1">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.Validator.IValidator`1.Validate(`0)">
      <summary>Performs validation.</summary>
      <param name="entity" />
    </member>
    <member name="T:Gehtsoft.Validator.JSConvertor.ConvertToJsExtension">
      <summary>The extension of the validator for JS conversion.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.JSConvertor.ConvertToJsExtension.GetJsRules(Gehtsoft.Validator.IBaseValidator)">
      <summary>Convert Validator to JS</summary>
      <param name="validator" />
      <param name="compilerType">The type of the LINQ expression compiler to be used.</param>
    </member>
    <member name="T:Gehtsoft.Validator.JSConvertor.JsValidatorRule">
      <summary>JavaScript Validator Rule</summary>
    </member>
    <member name="P:Gehtsoft.Validator.JSConvertor.JsValidatorRule.JsTargetName">
      <summary>The name of the target.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.JSConvertor.JsValidatorRule.JsValidationExpression">
      <summary>The JS boolean expression for the validation.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.JSConvertor.JsValidatorRule.JsWhenExpression">
      <summary>The JS boolean expression to determine whether the validation is required.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.JSConvertor.JsValidatorRule.ErrorMessage">
      <summary>The error message to show in case the validation failed.</summary>
    </member>
    <member name="T:Gehtsoft.Validator.JSConvertor.ValidationExpressionCompiler">
      <summary>The base validation compiler.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.JSConvertor.ValidationExpressionCompiler.#ctor(System.Linq.Expressions.LambdaExpression,System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Constructor.</summary>
      <param name="lambdaExpression">The lambda expression that has one or two parameters (each is either the value or the whole entity) and returns a boolean value.</param>
      <param name="entityParameterIndex">The index of the entity parameter in the expression.</param>
      <param name="valueParameterIndex">The index of the value parameter in the expression.</param>
    </member>
    <member name="T:Gehtsoft.Validator.MustBeInRangeAttribute">
      <summary>The attribute that adds a range rule for a numeric and date field.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.MustBeInRangeAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.Validator.MustBeInRangeAttribute.Mininum">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.Validator.MustBeInRangeAttribute.MinimumInclusive">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.Validator.MustBeInRangeAttribute.Maximum">
      <summary></summary>
    </member>
    <member name="P:Gehtsoft.Validator.MustBeInRangeAttribute.MaximumInclusive">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.Validator.MustBeNotEmptyAttribute">
      <summary>The attribute that adds not empty rule to string, nullables or collections.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.MustBeNotEmptyAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.Validator.MustBeNotNullAttribute">
      <summary>The attribute that adds not null validation rule.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.MustBeNotNullAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.Validator.MustBeNotNullOrWhitespaceAttribute">
      <summary>The attribute that adds not null or whitespace validation rule to strings.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.MustBeNotNullOrWhitespaceAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.Validator.MustBeShorterThanAttribute">
      <summary>The validation rule that adds "length must be shorter" rule to strings or arrays.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.MustBeShorterThanAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.Validator.MustBeShorterThanAttribute.#ctor(System.Int32)">
      <summary></summary>
      <param name="length" />
    </member>
    <member name="P:Gehtsoft.Validator.MustBeShorterThanAttribute.Length">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.Validator.MustMatchAttribute">
      <summary>The attribute adds a string must match a regular expression rule.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.MustMatchAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="M:Gehtsoft.Validator.MustMatchAttribute.#ctor(System.String)">
      <summary></summary>
      <param name="pattern" />
    </member>
    <member name="P:Gehtsoft.Validator.MustMatchAttribute.Pattern">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.Validator.ValidationFailure">
      <summary>The one validation failure.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.ValidationFailure.Name">
      <summary>The name of the value failed.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.ValidationFailure.Code">
      <summary>The code of the failure.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.ValidationFailure.Path">
      <summary>The path to the value failed.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.ValidationFailure.Message">
      <summary>The error message.</summary>
    </member>
    <member name="T:Gehtsoft.Validator.ValidationFailureCollection">
      <summary>The list of validation failures.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.ValidationFailureCollection.Count">
      <summary>Returns the number of failures.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.ValidationFailureCollection.Item(System.Int32)">
      <summary>Returns the failure by its index.</summary>
      <param name="index" />
    </member>
    <member name="T:Gehtsoft.Validator.ValidationMessageResolverFactory">
      <summary>The factory of validation messages resolvers</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationMessageResolverFactory.GetResolver(System.Type)">
      <summary>Gets resolver for the type specified.</summary>
      <param name="entityType">The type of the entity.</param>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationMessageResolverFactory.SetResolverFor(System.Type,Gehtsoft.Validator.IValidationMessageResolver)">
      <summary>Sets resolve for the type specified.</summary>
      <param name="T">The type of the entity.</param>
      <param name="entityType">The type of the entity.</param>
      <param name="resolver" />
    </member>
    <member name="T:Gehtsoft.Validator.ValidationResult">
      <summary>The validation result.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.ValidationResult.IsValid">
      <summary>Returns the flag indicating whether the object is valid.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.ValidationResult.Failures">
      <summary>Returns the list of validation failures.</summary>
    </member>
    <member name="T:Gehtsoft.Validator.ValidationRuleBuilder">
      <summary>The rule binder for BaseValidator</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.Must(Gehtsoft.Validator.IValidationPredicate)">
      <summary>Sets the validation predicate.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.WhenValue(Gehtsoft.Validator.IValidationPredicate)">
      <summary>Sets when predicate for the value.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.WhenNotNull()">
      <summary>Sets validation only when the value is not null.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.UnlessValue(Gehtsoft.Validator.IValidationPredicate)">
      <summary>Sets unless predicate for the value.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.WhenEntity(Gehtsoft.Validator.IValidationPredicate)">
      <summary>Sets when predicate for the whole entity.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.UnlessEntity(Gehtsoft.Validator.IValidationPredicate)">
      <summary>Sets unless predicate for the entity.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.WithCode(System.Int32)">
      <summary>Sets the error code.</summary>
      <param name="code" />
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.WithMessage(System.String)">
      <summary>Sets the error message.</summary>
      <param name="message" />
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.ValidateUsing(System.Type)">
      <summary>Sets the validator to be used to validate the property.</summary>
      <param name="validatorType">The type of the validator.</param>
      <param name="args">The arguments for the constructor in case the other then default constructor is desired to be used.</param>
      <param name="validator">An instance of the validator to be used.</param>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.Null">
      <summary>Sets the validation predicate to the check whether the value is null.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.NotNull">
      <summary>Sets the validation predicate to the check whether the value is not null.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.NotNullOrEmpty">
      <summary>Sets the validation predicate to the check whether the value is not null or empty.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.NotNullOrWhitespace">
      <summary>Sets the validation predicate to the check whether the value is not null, and is not an empty or whitespace string.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.ShorterThan(System.Int32)">
      <summary>Sets the validation predicate to the check whether the value length is shorter than the value specified.</summary>
      <param name="length">The length limit. Use the maximum desired length plus 1. In other words, this value is not the last permitted length, it is the first
wrong length value.</param>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.DoesMatch(System.String)">
      <summary>Sets the validation predicate to the check whether the string value matches the regular expression specified.</summary>
      <param name="pattern">The regular expression pattern to be checked.</param>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.DoesNotMatch(System.String)">
      <summary>Sets the validation predicate to the check whether the string value does not match the regular expression specified.</summary>
      <param name="pattern">The regular expression pattern to be checked.</param>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.EnumIsCorrect">
      <summary>Sets the validation predicate to the check whether the enumeration value is a correct enumeration value.</summary>
      <param name="enumType">The type of the enumeration.</param>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.EmailAddress">
      <summary>Sets the validation whether the mail address is correct.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.NotSQLInjection">
      <summary>Sets the validation whether the value is not an SQL Injection attempt</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.NotHTML">
      <summary>Sets the validation whether the value is not an HTML Injection attempt</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.CreditCardNumber">
      <summary>Sets the validation whether the credit card number is correct.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationRuleBuilder.ServerOnly">
      <summary>Makes the validation rule a server-only one.</summary>
    </member>
    <member name="T:Gehtsoft.Validator.ValidationTarget">
      <summary>The target of the validation rule.</summary>
    </member>
    <member name="M:Gehtsoft.Validator.ValidationTarget.GetCustomAttribute``1">
      <summary>Gets a custom attribute for the target.</summary>
      <param name="T">The type of the attribute (must be derived from Attribute).</param>
    </member>
    <member name="P:Gehtsoft.Validator.ValidationTarget.TargetName">
      <summary>Gets a name of the target (e.g. property name or a name specified in RuleFor method).</summary>
    </member>
    <member name="P:Gehtsoft.Validator.ValidationTarget.ValueType">
      <summary>The type of the target value.</summary>
    </member>
    <member name="T:Gehtsoft.Validator.ValidatorAttributeBase">
      <summary>The base attribute class for all validation attributes.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.ValidatorAttributeBase.WidthCode">
      <summary>The code to be used in case the rule is failed.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.ValidatorAttributeBase.WithMessage">
      <summary>The message to be used in case the rule is failed.</summary>
    </member>
    <member name="P:Gehtsoft.Validator.ValidatorAttributeBase.ForElement">
      <summary>The flag indicating whether the attribute is applied to the whole property or for each element of a property.</summary>
    </member>
  </members>
</doc>