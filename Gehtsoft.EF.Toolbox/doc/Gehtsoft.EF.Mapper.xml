<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Gehtsoft.EF.Mapper</name>
  </assembly>
  <members>
    <member name="T:Gehtsoft.EF.Mapper.MapClassAttribute">
      <summary>The attribute that marks a class as a model for another class.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.MapClassAttribute.#ctor">
      <summary>Constructor</summary>
      <param name="otherType" />
    </member>
    <member name="P:Gehtsoft.EF.Mapper.MapClassAttribute.OtherType">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Mapper.DoNotAutoMapAttribute">
      <summary>The attribute that marks a property so it won't be automatically mapped</summary>
    </member>
    <member name="T:Gehtsoft.EF.Mapper.MapEntityAttribute">
      <summary>The attribute that marks a class as a model for an EF entity.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.MapEntityAttribute.#ctor(System.Type)">
      <summary></summary>
      <param name="entityType" />
    </member>
    <member name="P:Gehtsoft.EF.Mapper.MapEntityAttribute.EntityType">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Mapper.MapFactory">
      <summary>The main class of the mapping factory.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.MapFactory.GetMap``2">
      <summary>Gets the map.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.MapFactory.CreateMap``2">
      <summary>Creates a new map.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.MapFactory.Map``2(``0,``1)">
      <summary>Maps one value to another.</summary>
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:Gehtsoft.EF.Mapper.MapFactory.RemoveMap``2">
      <summary>Removes previously created map from the map directory</summary>
    </member>
    <member name="T:Gehtsoft.EF.Mapper.MapFlag">
      <summary>The flag that modifies behavior of the mapping operation.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Mapper.MapFlag.None">
      <summary></summary>
    </member>
    <member name="F:Gehtsoft.EF.Mapper.MapFlag.TrimStrings">
      <summary>Trims spaces from the start and the end of the string.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Mapper.MapFlag.TrimToSeconds">
      <summary>Trim datetime value to the whole seconds.</summary>
    </member>
    <member name="F:Gehtsoft.EF.Mapper.MapFlag.TrimToDate">
      <summary>Trim datetime value to the date.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Mapper.MappingAction`2">
      <summary>Actions to be performed before or after map.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.MappingAction`2.When(System.Func`3)">
      <summary>Sets the predicate that defines the condition when the action must be performed.</summary>
      <param name="predicate" />
    </member>
    <member name="T:Gehtsoft.EF.Mapper.MapPropertyAttribute">
      <summary>The attribute that associates the model property to the property of the other class or entity.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.MapPropertyAttribute.#ctor(System.String)">
      <summary>Constructor</summary>
      <param name="name">The name of the property in the other class.</param>
      <param name="mapFlags">The mapping behavior flag.</param>
    </member>
    <member name="P:Gehtsoft.EF.Mapper.MapPropertyAttribute.Name">
      <summary>The name of the property in the other class.</summary>
    </member>
    <member name="P:Gehtsoft.EF.Mapper.MapPropertyAttribute.MapFlags">
      <summary>The mapping behavior flag.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Mapper.Map`2">
      <summary>The map between two types</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Map`2.For(System.String)">
      <summary>Creates a mapping specification for the specified target property.</summary>
      <param name="name">The property name.</param>
      <param name="member">The accessor expression.</param>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Map`2.Find``1(System.Linq.Expressions.Expression{System.Func`2})">
      <summary>Finds all mapping rules for the destination property.</summary>
      <param name="member" />
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Map`2.Find(System.String)">
      <summary>Finds all mapping specification for the specified target property.</summary>
      <param name="name">The property name.</param>
      <param name="member">The accessor expression.</param>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Map`2.BeforeMapping(System.Action`2)">
      <summary>Adds a before mapping action.</summary>
      <param name="action" />
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Map`2.AfterMapping(System.Action`2)">
      <summary>Adds an after mapping action.</summary>
      <param name="action" />
    </member>
    <member name="P:Gehtsoft.EF.Mapper.Map`2.Factory">
      <summary>Custom factory to create an instance of the destination type.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Map`2.Do(`0,`1)">
      <summary>Performs mapping.</summary>
      <param name="source" />
      <param name="destination" />
      <param name="ignoreNull">If this flag is set true, the null values of the source object properties will be ignored.</param>
    </member>
    <member name="T:Gehtsoft.EF.Mapper.PropertyMapping`2">
      <summary>The property mapping definition.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.PropertyMapping`2.From``1(System.Linq.Expressions.Expression{System.Func`2})">
      <summary>Sets the source of the mapping rule.</summary>
      <param name="propertyName" />
      <param name="expression">The LINQ expression for getting the source value. Please note that unlike destination expression that was used in
Map.For() method, this expression can be any expression that
returns the value.</param>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.PropertyMapping`2.Assign``1(`2)">
      <summary>Sets a constant or expression source</summary>
      <param name="constant" />
      <param name="expression">The LINQ expression for getting the source value.</param>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.PropertyMapping`2.When(System.Func`2)">
      <summary>Add mapping rule predicate for source entity.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.EF.Mapper.PropertyMapping`2.WhenDestination(System.Func`2)">
      <summary>Add mapping rule predicate for destination entity.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.EF.Mapper.PropertyMapping`2.Otherwise()">
      <summary>Create a new mapping rule with the same target and condition opposite to the original condition.</summary>
      <param name="predicate" />
    </member>
    <member name="M:Gehtsoft.EF.Mapper.PropertyMapping`2.Ignore">
      <summary>Set the rule predicate that makes it never run.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.PropertyMapping`2.ReplaceWith">
      <summary>Puts ignore on all previously defined rules with the same target as a current rule and creates a new rule.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.PropertyMapping`2.Always">
      <summary>Removes the rule predicate so it will run always.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.PropertyMapping`2.WithFlags(Gehtsoft.EF.Mapper.MapFlag)">
      <summary>Applies mapping flags to the mapping rule.</summary>
      <param name="flag" />
    </member>
    <member name="T:Gehtsoft.EF.Mapper.Validator.EfModelValidator`1">
      <summary>The base class for mapper model validators.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Validator.EfModelValidator`1.#ctor(Gehtsoft.EF.Db.SqlDb.SqlDbLanguageSpecifics,Gehtsoft.EF.Validator.IValidatorConnectionFactory)">
      <summary>Constructor</summary>
      <param name="specifics">The SQL specifics.</param>
      <param name="connectionFactory">The connection factory.</param>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Validator.EfModelValidator`1.ValidateModel(Gehtsoft.EF.Validator.IEfValidatorMessageProvider)">
      <summary>Finds the map and adds all required validation for the model.</summary>
      <param name="messageProvider">The message provider.</param>
    </member>
    <member name="T:Gehtsoft.EF.Mapper.Validator.MustBeInDbValueRangeAttribute">
      <summary>The attribute that adds validation of allowed value range for numeric or datatime properties.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Validator.MustBeInDbValueRangeAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Mapper.Validator.MustBeUniqueAttribute">
      <summary>The attribute that adds uniqueness validation</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Validator.MustBeUniqueAttribute.#ctor">
      <summary>Constructor</summary>
    </member>
    <member name="T:Gehtsoft.EF.Mapper.Validator.MustExistAttribute">
      <summary>The attribute that adds validator that checks whether the referenced object exists.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Validator.MustExistAttribute.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="T:Gehtsoft.EF.Mapper.Validator.MustHaveValidDbSizeAttribute">
      <summary>The attribute that adds check whether the string value isn't longer than the associated database column.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Validator.MustHaveValidDbSizeAttribute.#ctor">
      <summary></summary>
    </member>
    <member name="T:Gehtsoft.EF.Mapper.Validator.RuleBuilderExtension">
      <summary>The extension of the validation rule builders for model validation.</summary>
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Validator.RuleBuilderExtension.MustHaveValidDbSize(Gehtsoft.Validator.ValidationRuleBuilder)">
      <summary>Makes the rule to validate whether the string isn't longer than the corresponding database column.</summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Validator.RuleBuilderExtension.MustBeInValidDbRange(Gehtsoft.Validator.ValidationRuleBuilder)">
      <summary>Makes the rule to validate whether numeric or datatime value fits into the corresponding database column allowed range.</summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Validator.RuleBuilderExtension.MustBeUnqiue(Gehtsoft.Validator.ValidationRuleBuilder)">
      <summary>Makes the rule check that the value is unique.</summary>
      <param name="builder" />
    </member>
    <member name="M:Gehtsoft.EF.Mapper.Validator.RuleBuilderExtension.MustExists(Gehtsoft.Validator.ValidationRuleBuilder)">
      <summary>Makes the rule check whether the referenced entity exists.</summary>
      <param name="builder" />
    </member>
  </members>
</doc>